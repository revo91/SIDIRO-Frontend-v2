[{"E:\\Dev\\React\\sidiro\\src\\index.tsx":"1","E:\\Dev\\React\\sidiro\\src\\reportWebVitals.ts":"2","E:\\Dev\\React\\sidiro\\src\\App.tsx":"3","E:\\Dev\\React\\sidiro\\src\\components\\Drawer.component.tsx":"4","E:\\Dev\\React\\sidiro\\src\\routes\\Drawer.routes.tsx":"5","E:\\Dev\\React\\sidiro\\src\\components\\Overview.component.tsx":"6","E:\\Dev\\React\\sidiro\\src\\i18n.ts":"7","E:\\Dev\\React\\sidiro\\src\\translations.ts":"8","E:\\Dev\\React\\sidiro\\src\\reducers\\Root.reducer.ts":"9","E:\\Dev\\React\\sidiro\\src\\reducers\\UniversalTabs.reducer.ts":"10","E:\\Dev\\React\\sidiro\\src\\actions\\UniversalTabs.action.ts":"11","E:\\Dev\\React\\sidiro\\src\\components\\UniversalTabs.component.tsx":"12","E:\\Dev\\React\\sidiro\\src\\reducers\\LanguageDialog.reducer.ts":"13","E:\\Dev\\React\\sidiro\\src\\actions\\LanguageDialog.action.ts":"14","E:\\Dev\\React\\sidiro\\src\\components\\LanguageDialog.component.tsx":"15","E:\\Dev\\React\\sidiro\\src\\components\\Powermonitor.component.tsx":"16","E:\\Dev\\React\\sidiro\\src\\components\\LineChart.component.tsx":"17","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog.component.tsx":"18","E:\\Dev\\React\\sidiro\\src\\reducers\\DeviceDataDialog.reducer.ts":"19","E:\\Dev\\React\\sidiro\\src\\actions\\DeviceDataDialog.action.ts":"20","E:\\Dev\\React\\sidiro\\src\\components\\Events.component.tsx":"21","E:\\Dev\\React\\sidiro\\src\\components\\UniversalTable.component.tsx":"22","E:\\Dev\\React\\sidiro\\src\\components\\Elevation.component.tsx":"23","E:\\Dev\\React\\sidiro\\src\\components\\Reports.component.tsx":"24","E:\\Dev\\React\\sidiro\\src\\components\\BarChart.component.tsx":"25","E:\\Dev\\React\\sidiro\\src\\components\\PieChart.component.tsx":"26","E:\\Dev\\React\\sidiro\\src\\reducers\\Backdrop.reducer.ts":"27","E:\\Dev\\React\\sidiro\\src\\actions\\Backdrop.action.ts":"28","E:\\Dev\\React\\sidiro\\src\\components\\Backdrop.component.tsx":"29","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\BreakerDevice.component.tsx":"30","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\CurrentTab.component.tsx":"31","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTab.component.tsx":"32","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\TransformerSVG.component.tsx":"33","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\CircuitBreakerSVG.component.tsx":"34","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\GeneratorSVG.component.tsx":"35","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\CouplingBreakerSVG.component.tsx":"36","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\ParametersTableSVG.component.tsx":"37","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\SectionSVG.component.tsx":"38","E:\\Dev\\React\\sidiro\\src\\utilities\\SiemensColors.utility.ts":"39","E:\\Dev\\React\\sidiro\\src\\utilities\\DeviceTypes.utility.ts":"40","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\GeneratorDevice.component.tsx":"41","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\TransformerDevice.component.tsx":"42","E:\\Dev\\React\\sidiro\\src\\utilities\\BreakerStates.utility.ts":"43","E:\\Dev\\React\\sidiro\\src\\hooks\\useUpdateChartFontColor.hook.ts":"44","E:\\Dev\\React\\sidiro\\src\\hooks\\useUpdateChartDatasets.hook.ts":"45","E:\\Dev\\React\\sidiro\\src\\components\\TableWithSort.component.tsx":"46","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\PanelSVG.component.tsx":"47","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CompartmentSVG.component.tsx":"48","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\TestSVG.component.tsx":"49","E:\\Dev\\React\\sidiro\\src\\mock\\elevation.mock.ts":"50","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3WLSVG.component.tsx":"51","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3VAVerticalSVG.component.tsx":"52","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3VAHorizontalSVG.component.tsx":"53","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NP1VerticalSVG.component.tsx":"54","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NJ6SVG.component.tsx":"55","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NJ4SVG.component.tsx":"56","E:\\Dev\\React\\sidiro\\src\\reducers\\Elevation.reducer.ts":"57","E:\\Dev\\React\\sidiro\\src\\actions\\Elevation.action.ts":"58","E:\\Dev\\React\\sidiro\\src\\reducers\\Overview.reducer.ts":"59"},{"size":509,"mtime":1614582158684,"results":"60","hashOfConfig":"61"},{"size":425,"mtime":1611564277809,"results":"62","hashOfConfig":"61"},{"size":2836,"mtime":1614594077597,"results":"63","hashOfConfig":"61"},{"size":8953,"mtime":1614594273911,"results":"64","hashOfConfig":"61"},{"size":740,"mtime":1612870262805,"results":"65","hashOfConfig":"61"},{"size":13597,"mtime":1616065125877,"results":"66","hashOfConfig":"61"},{"size":2045,"mtime":1612268307219,"results":"67","hashOfConfig":"61"},{"size":4702,"mtime":1614929275254,"results":"68","hashOfConfig":"61"},{"size":739,"mtime":1615984380993,"results":"69","hashOfConfig":"61"},{"size":517,"mtime":1612947186584,"results":"70","hashOfConfig":"61"},{"size":222,"mtime":1612272726129,"results":"71","hashOfConfig":"61"},{"size":2713,"mtime":1615548166446,"results":"72","hashOfConfig":"61"},{"size":457,"mtime":1612869056672,"results":"73","hashOfConfig":"61"},{"size":169,"mtime":1612340177186,"results":"74","hashOfConfig":"61"},{"size":2201,"mtime":1612511149322,"results":"75","hashOfConfig":"61"},{"size":614,"mtime":1614159398121,"results":"76","hashOfConfig":"61"},{"size":3068,"mtime":1614676353381,"results":"77","hashOfConfig":"61"},{"size":3122,"mtime":1616065263129,"results":"78","hashOfConfig":"61"},{"size":802,"mtime":1616065131259,"results":"79","hashOfConfig":"61"},{"size":410,"mtime":1616064174462,"results":"80","hashOfConfig":"61"},{"size":2052,"mtime":1615548014159,"results":"81","hashOfConfig":"61"},{"size":1522,"mtime":1614328256857,"results":"82","hashOfConfig":"61"},{"size":8841,"mtime":1616061741781,"results":"83","hashOfConfig":"61"},{"size":4353,"mtime":1614596448385,"results":"84","hashOfConfig":"61"},{"size":2155,"mtime":1614676022274,"results":"85","hashOfConfig":"61"},{"size":2004,"mtime":1614676075024,"results":"86","hashOfConfig":"61"},{"size":419,"mtime":1613052032862,"results":"87","hashOfConfig":"61"},{"size":140,"mtime":1613051432655,"results":"88","hashOfConfig":"61"},{"size":730,"mtime":1613051990939,"results":"89","hashOfConfig":"61"},{"size":815,"mtime":1614085088410,"results":"90","hashOfConfig":"61"},{"size":2708,"mtime":1614587129058,"results":"91","hashOfConfig":"61"},{"size":9751,"mtime":1616065698668,"results":"92","hashOfConfig":"61"},{"size":2762,"mtime":1616065126991,"results":"93","hashOfConfig":"61"},{"size":5380,"mtime":1616065645557,"results":"94","hashOfConfig":"61"},{"size":2200,"mtime":1616065232056,"results":"95","hashOfConfig":"61"},{"size":6358,"mtime":1615985847476,"results":"96","hashOfConfig":"61"},{"size":2704,"mtime":1616065128215,"results":"97","hashOfConfig":"61"},{"size":1530,"mtime":1616053597006,"results":"98","hashOfConfig":"61"},{"size":3101,"mtime":1614583804653,"results":"99","hashOfConfig":"61"},{"size":125,"mtime":1614085479558,"results":"100","hashOfConfig":"61"},{"size":1119,"mtime":1614085317035,"results":"101","hashOfConfig":"61"},{"size":1123,"mtime":1614085321291,"results":"102","hashOfConfig":"61"},{"size":69,"mtime":1614156488357,"results":"103","hashOfConfig":"61"},{"size":1433,"mtime":1614607096669,"results":"104","hashOfConfig":"61"},{"size":864,"mtime":1614676311073,"results":"105","hashOfConfig":"61"},{"size":7276,"mtime":1614929374321,"results":"106","hashOfConfig":"61"},{"size":2505,"mtime":1616061717494,"results":"107","hashOfConfig":"61"},{"size":1761,"mtime":1615804881756,"results":"108","hashOfConfig":"61"},{"size":4359,"mtime":1615296134508,"results":"109","hashOfConfig":"61"},{"size":3229,"mtime":1615472604478,"results":"110","hashOfConfig":"61"},{"size":10588,"mtime":1615461167960,"results":"111","hashOfConfig":"61"},{"size":4805,"mtime":1615551015772,"results":"112","hashOfConfig":"61"},{"size":1621,"mtime":1615452447087,"results":"113","hashOfConfig":"61"},{"size":3250,"mtime":1615461224066,"results":"114","hashOfConfig":"61"},{"size":4376,"mtime":1615465096998,"results":"115","hashOfConfig":"61"},{"size":2102,"mtime":1615471322917,"results":"116","hashOfConfig":"61"},{"size":17029,"mtime":1616062957496,"results":"117","hashOfConfig":"61"},{"size":47,"mtime":1615535123127,"results":"118","hashOfConfig":"61"},{"size":9991,"mtime":1616054733136,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"vdwtrg",{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"122"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"122"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"E:\\Dev\\React\\sidiro\\src\\index.tsx",[],["242","243"],"E:\\Dev\\React\\sidiro\\src\\reportWebVitals.ts",[],"E:\\Dev\\React\\sidiro\\src\\App.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Drawer.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\routes\\Drawer.routes.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview.component.tsx",["244"],"import React from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { TransformerSVG } from './Overview/TransformerSVG.component';\r\nimport { CircuitBreakerSVG } from './Overview/CircuitBreakerSVG.component';\r\nimport { GeneratorSVG } from './Overview/GeneratorSVG.component';\r\nimport { CouplingBreakerSVG } from './Overview/CouplingBreakerSVG.component';\r\nimport { SiemensAccentBlue, SiemensAccentTeal, SiemensAccentYellow } from '../utilities/SiemensColors.utility';\r\nimport { SectionSVG } from './Overview/SectionSVG.component';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../reducers/Root.reducer';\r\nimport { UniversalTabs } from './UniversalTabs.component';\r\n\r\n//common constants for SVGs to import /////////////////\r\nexport const lineLength = 6;\r\nexport const circleRadius = 0.5 * lineLength;\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    lineStyle: {\r\n      stroke: theme.palette.type === 'dark' ? theme.palette.text.primary : '#000000',\r\n      strokeWidth: lineLength / 25,\r\n      strokeLinecap: 'round'\r\n    },\r\n    circleStyle: {\r\n      stroke: theme.palette.type === 'dark' ? theme.palette.text.primary : '#000000',\r\n      strokeWidth: lineLength / 25,\r\n      strokeLinecap: 'round',\r\n      fill: 'none'\r\n    },\r\n    lineStyleVoltageApplied: {\r\n      strokeWidth: lineLength / 25,\r\n      strokeLinecap: 'round',\r\n      stroke: '#10b115',\r\n    },\r\n    circleStyleVoltageApplied: {\r\n      strokeWidth: lineLength / 25,\r\n      strokeLinecap: 'round',\r\n      fill: 'none',\r\n      stroke: '#10b115',\r\n    },\r\n    generatorSymbolTextStyle: {\r\n      fontSize: `${circleRadius / 10}em`,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentTeal.dark3,\r\n      textAnchor: 'middle',\r\n      dominantBaseline: 'central'\r\n    },\r\n    paramsTableTitleStyle: {\r\n      stroke: theme.palette.type === 'dark' ? SiemensAccentYellow.light3 : SiemensAccentBlue.dark4,\r\n      strokeWidth: lineLength / 64,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.background.paper : SiemensAccentBlue.dark4,\r\n    },\r\n    paramsTableRowStyle: {\r\n      stroke: theme.palette.type === 'dark' ? SiemensAccentYellow.light3 : SiemensAccentBlue.dark4,\r\n      strokeWidth: lineLength / 64,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.background.paper : SiemensAccentBlue.light6,\r\n    },\r\n    paramsTableTitleTextStyle: {\r\n      fontSize: `${circleRadius / 36}em`,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : '#ffffff',\r\n      textAnchor: 'middle',\r\n      dominantBaseline: 'central',\r\n      letterSpacing: '-0.03em'\r\n    },\r\n    paramsTableRowTextStyle: {\r\n      fontSize: `${circleRadius / 36}em`,\r\n      fill: theme.palette.text.primary,\r\n      textAnchor: 'end',\r\n      dominantBaseline: 'central',\r\n      letterSpacing: '-0.02em',\r\n    },\r\n    infeedsNameStyle: {\r\n      fontSize: `${circleRadius / 15}em`,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentTeal.dark3,\r\n      textAnchor: 'end',\r\n      dominantBaseline: 'hanging',\r\n      letterSpacing: '-0.05em'\r\n    },\r\n    circuitBreakersNameStyle: {\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentTeal.dark3,\r\n      textAnchor: 'end',\r\n      dominantBaseline: 'hanging',\r\n      letterSpacing: '-0.05em',\r\n      fontSize: `${circleRadius / 18}em`,\r\n    },\r\n    clickableOverlay: {\r\n      fill: 'rgba(255, 255, 255, 0)',\r\n      \"&:hover, &:focus\": {\r\n        stroke: SiemensAccentYellow.light3,\r\n        strokeWidth: lineLength / 32,\r\n      }\r\n    },\r\n    overviewTabSVGTextsCentralAnchor: {\r\n      fontSize: `${circleRadius / 32}em`,\r\n      fill: theme.palette.text.primary,\r\n      textAnchor: 'middle',\r\n      dominantBaseline: 'central',\r\n      letterSpacing: '-0.02em'\r\n    },\r\n    overviewTabSVGTextsCentralLeftAnchor: {\r\n      fontSize: `${circleRadius / 32}em`,\r\n      fill: theme.palette.text.primary,\r\n      textAnchor: 'start',\r\n      dominantBaseline: 'hanging',\r\n      letterSpacing: '-0.02em'\r\n    },\r\n    svgContainer: {\r\n      overflowX: 'auto',\r\n      whiteSpace: 'nowrap'\r\n    },\r\n    svgElement: {\r\n      minWidth: '1500px',\r\n    }\r\n  }));\r\n///////////////////////////////////////////////////\r\n\r\nenum InfeedTypes {\r\n  transformer = 'transformer',\r\n  generator = 'generator'\r\n}\r\n\r\nenum BreakerTypes {\r\n  circuitBreaker = 'circuitBreaker',\r\n  drawOutCircuitBreaker = 'drawOutCircuitBreaker'\r\n}\r\n\r\nexport const Overview = () => {\r\n  const { t } = useTranslation();\r\n  const classes = useStyles();\r\n  const overview = useSelector((state: RootState) => state.overview);\r\n  const svgViewBoxX = 150;\r\n  const svgViewBoxY = 74;\r\n  //for testing purposes///////////////////////////\r\n  const [sampleParams, setSampleParams] = React.useState<{ activePower: number, reactivePower: number, powerFactor: number, current: number }>({ activePower: 100, reactivePower: 50, powerFactor: 0.88, current: 10 })\r\n\r\n  React.useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setSampleParams({\r\n        ...sampleParams,\r\n        activePower: parseFloat((Math.random() * 1000).toFixed(2)),\r\n        reactivePower: parseFloat((Math.random() * 100).toFixed(2)),\r\n        powerFactor: parseFloat((Math.random()).toFixed(2)),\r\n        current: parseFloat((Math.random() * 10).toFixed(2))\r\n      })\r\n    }, 2000)\r\n    return () => clearInterval(interval)\r\n  }, [sampleParams])\r\n  ////////////////////////////////////////////////\r\n\r\n  const renderTabsWithCircuitDiagrams = (): Array<{ label: string, content: React.ReactNode }> => {\r\n    let tabs: Array<{ label: string, content: React.ReactNode }> = [];\r\n    overview.diagrams.forEach((diagram, diagramIndex) => {\r\n      const content = (\r\n        <div className={classes.svgContainer}>\r\n          <svg viewBox={`-4 -3 ${svgViewBoxX} ${svgViewBoxY}`} className={classes.svgElement}>\r\n            {diagram.sections.map((section, sectionIndex) => {\r\n              const infeeds = section.infeeds?.map((infeed, infeedIndex) => {\r\n                return renderInfeed(infeed.name,\r\n                  infeed.tableName,\r\n                  infeed.breaker,\r\n                  infeed.type,\r\n                  ((svgViewBoxX / diagram.sections.length) / section.infeeds.length) / 2 + infeedIndex * (svgViewBoxX / diagram.sections.length) / section.infeeds.length + sectionIndex * (svgViewBoxX / diagram.sections.length),\r\n                  0)\r\n              })\r\n              ///////////////////////////\r\n              const sectionLines = renderSection(sectionIndex * svgViewBoxX / diagram.sections.length + lineLength / 2,\r\n                6 * lineLength,\r\n                svgViewBoxX / diagram.sections.length - lineLength,\r\n                section.coupling.type !== '' ? {\r\n                  state: section.coupling.state,\r\n                  name: section.coupling.name,\r\n                  drawOut: section.coupling.type === 'drawOutcircuitBreaker' ? true : false\r\n                } :\r\n                  false);\r\n              const breakers = section.breakers?.map((breaker, breakerIndex) => {\r\n                return renderBreaker(breaker.name,\r\n                  breaker.tableName,\r\n                  breaker.type,\r\n                  breaker.state,\r\n                  sectionIndex * svgViewBoxX / diagram.sections.length + lineLength / 2 + breakerIndex * lineLength * 1.2,\r\n                  6 * lineLength)\r\n              })\r\n              return <React.Fragment key={sectionIndex}>{infeeds}{sectionLines}{breakers}</React.Fragment>\r\n\r\n            })}\r\n          </svg>\r\n        </div>\r\n      )\r\n      return tabs.push({ label: diagram.name, content: content })\r\n    })\r\n    return tabs\r\n  }\r\n\r\n  const renderInfeed = (name: string, tableName: string, breaker: { name: string, type: string, state: string }, type: string, x: number, y: number) => {\r\n    switch (type) {\r\n      case InfeedTypes.transformer:\r\n        return (\r\n          <React.Fragment key={`${x}-${y}`}>\r\n            <TransformerSVG\r\n              x={x}\r\n              y={y}\r\n              name={name}\r\n              tableName={tableName}\r\n              activePower={sampleParams.activePower}\r\n              current={sampleParams.current}\r\n              powerFactor={sampleParams.powerFactor}\r\n              breakerName={breaker.name}\r\n            />\r\n            {renderBreaker(breaker.name, 'test', breaker.type, breaker.state, x, y + 3 * lineLength)}\r\n          </React.Fragment>\r\n        )\r\n      case InfeedTypes.generator:\r\n        return (\r\n          <React.Fragment key={`${x}-${y}`}>\r\n            <GeneratorSVG\r\n              x={x}\r\n              y={y}\r\n              name={name}\r\n              tableName={tableName}\r\n              activePower={sampleParams.activePower}\r\n              current={sampleParams.current}\r\n              powerFactor={sampleParams.powerFactor}\r\n              breakerName={breaker.name}\r\n            />\r\n            {renderBreaker(breaker.name, 'test', breaker.type, breaker.state, x, y + 3 * lineLength)}\r\n          </React.Fragment>\r\n        )\r\n      default: return renderBreaker(breaker.name, '', breaker.type, breaker.state, x, y + 3 * lineLength)\r\n\r\n    }\r\n  }\r\n\r\n  const renderBreaker = (name: string, tableName: string | undefined, type: string, state: string, x: number, y: number) => {\r\n    switch (type) {\r\n      case BreakerTypes.circuitBreaker:\r\n        return (\r\n          <CircuitBreakerSVG\r\n            key={`${x}-${y}`}\r\n            x={x}\r\n            y={y}\r\n            state={state}\r\n            name={name}\r\n            tableName={tableName}\r\n            activePower={sampleParams.activePower}\r\n            current={sampleParams.current}\r\n            powerFactor={sampleParams.powerFactor}\r\n            voltageApplied={false}\r\n            noTable={tableName === undefined}\r\n          />\r\n        )\r\n      case BreakerTypes.drawOutCircuitBreaker:\r\n        return (\r\n          <CouplingBreakerSVG\r\n            key={`${name}-${tableName}`}\r\n            x={x}\r\n            y={y}\r\n            state={state}\r\n            name={name}\r\n            voltageApplied={false}\r\n            drawOut\r\n          />\r\n        )\r\n    }\r\n  }\r\n\r\n  const renderSection = (x: number, y: number, length: number, endCoupling?: { state: string, name: string, drawOut: boolean } | false,) => {\r\n    return (\r\n      <SectionSVG\r\n      key={`${x}-${y}`}\r\n        x={x}\r\n        y={y}\r\n        length={length}\r\n        voltageApplied={false}\r\n        endCoupling={endCoupling ?\r\n          <CouplingBreakerSVG\r\n            x={x + length}\r\n            y={y - 3 * lineLength}\r\n            state={endCoupling.state}\r\n            name={endCoupling.name}\r\n            voltageApplied={false}\r\n            drawOut={endCoupling.drawOut === true}\r\n          />\r\n          : false}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <UniversalTabs\r\n            name='overview'\r\n            tabs={renderTabsWithCircuitDiagrams()}\r\n          />\r\n        </Grid>\r\n        {/* <Grid item xs={12}>\r\n          <div className={classes.svgContainer}>\r\n            <svg viewBox={`0 0 150 74`} className={classes.svgElement}>\r\n              <TransformerSVG\r\n                x={10}\r\n                y={1}\r\n                name='TR1'\r\n                tableName='Trafo TR1'\r\n                activePower={sampleParams.activePower}\r\n                reactivePower={sampleParams.reactivePower}\r\n                powerFactor={sampleParams.powerFactor}\r\n                voltageApplied\r\n              />\r\n              <TransformerSVG\r\n                x={30}\r\n                y={1}\r\n                name='TR1'\r\n                tableName='Trafo TR1'\r\n                activePower={sampleParams.activePower}\r\n                reactivePower={sampleParams.reactivePower}\r\n                powerFactor={sampleParams.powerFactor}\r\n                voltageApplied\r\n              />\r\n              <CouplingBreakerSVG\r\n                x={10}\r\n                y={1 + 3 * lineLength}\r\n                state='open'\r\n                name='Q1'\r\n                voltageApplied\r\n                drawOut\r\n              />\r\n              <CircuitBreakerSVG\r\n                x={10}\r\n                y={1 + 6 * lineLength}\r\n                state='open'\r\n                name='cb1'\r\n                tableName='B1A komp.'\r\n                activePower={sampleParams.activePower}\r\n                current={sampleParams.current}\r\n                powerFactor={sampleParams.powerFactor}\r\n                voltageApplied={false}\r\n              />\r\n              <GeneratorSVG\r\n                x={120}\r\n                y={1}\r\n                name='GEN1'\r\n                tableName='Generator'\r\n                activePower={sampleParams.activePower}\r\n                reactivePower={sampleParams.reactivePower}\r\n                powerFactor={sampleParams.powerFactor}\r\n                voltageApplied\r\n              />\r\n              <SectionSVG\r\n                x={10}\r\n                y={1 + 6 * lineLength}\r\n                length={50}\r\n                voltageApplied={false}\r\n                endCoupling={<CouplingBreakerSVG\r\n                  x={60}\r\n                  y={1 + 3 * lineLength}\r\n                  state='open'\r\n                  name='Q1'\r\n                  voltageApplied={false}\r\n                />}\r\n              />\r\n            </svg>\r\n          </div>\r\n        </Grid>\r\n       */}\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","E:\\Dev\\React\\sidiro\\src\\i18n.ts",[],"E:\\Dev\\React\\sidiro\\src\\translations.ts",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\Root.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\UniversalTabs.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\UniversalTabs.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\UniversalTabs.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\LanguageDialog.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\LanguageDialog.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\LanguageDialog.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Powermonitor.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\LineChart.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\DeviceDataDialog.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\DeviceDataDialog.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\Events.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\UniversalTable.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Reports.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\BarChart.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\PieChart.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\Backdrop.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\Backdrop.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\Backdrop.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\BreakerDevice.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\CurrentTab.component.tsx",["245"],"import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { SiemensColors } from '../../utilities/SiemensColors.utility'; \r\nimport { DatePicker, TimePicker } from \"@material-ui/pickers\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    timePickersContainer: {\r\n      marginTop: theme.spacing(2),\r\n      paddingTop: theme.spacing(2),\r\n      paddingBottom: theme.spacing(2),\r\n    }\r\n  }),\r\n);\r\n\r\nexport const CurrentTab = () => {\r\n  const [sampleTimeSeriesData, setSampleTimeSeriesData] = React.useState<Array<{ t: number | Date, y: number }>>([{ t: new Date(2021, 1, 1), y: 10 }, { t: new Date(2021, 1, 5), y: 10 }, { t: new Date(2021, 1, 9), y: 10 }])\r\n  const [dateFrom, changeDateFrom] = React.useState<Date | null>(new Date());\r\n  const classes = useStyles();\r\n  const { t } = useTranslation();\r\n  \r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <LineChart\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  label: \"dataset1\",\r\n                  backgroundColor: SiemensColors.tealLight,\r\n                  borderColor: SiemensColors.tealLight,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: sampleTimeSeriesData\r\n                },\r\n                {\r\n                  label: \"dataset2\",\r\n                  backgroundColor: SiemensColors.yellowDark,\r\n                  borderColor: SiemensColors.yellowDark,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: [{ t: new Date(2021, 1, 1), y: 5 }, { t: new Date(2021, 1, 5), y: 7 }, { t: new Date(2021, 1, 9), y: 6 }]\r\n                }\r\n              ]\r\n            }} />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={2} className={classes.timePickersContainer}>\r\n        <Grid item xs={12} md={6}>\r\n          <DatePicker\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={changeDateFrom}\r\n            fullWidth\r\n            disableFuture\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TimePicker\r\n            ampm={false}\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={changeDateFrom}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTab.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\TransformerSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\CircuitBreakerSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\GeneratorSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\CouplingBreakerSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\ParametersTableSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\SectionSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\utilities\\SiemensColors.utility.ts",[],"E:\\Dev\\React\\sidiro\\src\\utilities\\DeviceTypes.utility.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\GeneratorDevice.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\TransformerDevice.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\utilities\\BreakerStates.utility.ts",[],"E:\\Dev\\React\\sidiro\\src\\hooks\\useUpdateChartFontColor.hook.ts",[],"E:\\Dev\\React\\sidiro\\src\\hooks\\useUpdateChartDatasets.hook.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\TableWithSort.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\PanelSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CompartmentSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\TestSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\mock\\elevation.mock.ts",[],["246","247"],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3WLSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3VAVerticalSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3VAHorizontalSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NP1VerticalSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NJ6SVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NJ4SVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\Elevation.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\Elevation.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\Overview.reducer.ts",[],{"ruleId":"248","replacedBy":"249"},{"ruleId":"250","replacedBy":"251"},{"ruleId":"252","severity":1,"message":"253","line":129,"column":11,"nodeType":"254","messageId":"255","endLine":129,"endColumn":12},{"ruleId":"252","severity":1,"message":"256","line":20,"column":32,"nodeType":"254","messageId":"255","endLine":20,"endColumn":55},{"ruleId":"248","replacedBy":"257"},{"ruleId":"250","replacedBy":"258"},"no-native-reassign",["259"],"no-negated-in-lhs",["260"],"@typescript-eslint/no-unused-vars","'t' is assigned a value but never used.","Identifier","unusedVar","'setSampleTimeSeriesData' is assigned a value but never used.",["259"],["260"],"no-global-assign","no-unsafe-negation"]