[{"E:\\Dev\\React\\sidiro\\src\\index.tsx":"1","E:\\Dev\\React\\sidiro\\src\\reportWebVitals.ts":"2","E:\\Dev\\React\\sidiro\\src\\App.tsx":"3","E:\\Dev\\React\\sidiro\\src\\components\\Drawer.component.tsx":"4","E:\\Dev\\React\\sidiro\\src\\routes\\Drawer.routes.tsx":"5","E:\\Dev\\React\\sidiro\\src\\components\\Overview.component.tsx":"6","E:\\Dev\\React\\sidiro\\src\\i18n.ts":"7","E:\\Dev\\React\\sidiro\\src\\translations.ts":"8","E:\\Dev\\React\\sidiro\\src\\reducers\\Root.reducer.ts":"9","E:\\Dev\\React\\sidiro\\src\\reducers\\UniversalTabs.reducer.ts":"10","E:\\Dev\\React\\sidiro\\src\\actions\\UniversalTabs.action.ts":"11","E:\\Dev\\React\\sidiro\\src\\components\\UniversalTabs.component.tsx":"12","E:\\Dev\\React\\sidiro\\src\\reducers\\LanguageDialog.reducer.ts":"13","E:\\Dev\\React\\sidiro\\src\\actions\\LanguageDialog.action.ts":"14","E:\\Dev\\React\\sidiro\\src\\components\\LanguageDialog.component.tsx":"15","E:\\Dev\\React\\sidiro\\src\\components\\Powermonitor.component.tsx":"16","E:\\Dev\\React\\sidiro\\src\\components\\LineChart.component.tsx":"17","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog.component.tsx":"18","E:\\Dev\\React\\sidiro\\src\\reducers\\DeviceDataDialog.reducer.ts":"19","E:\\Dev\\React\\sidiro\\src\\actions\\DeviceDataDialog.action.ts":"20","E:\\Dev\\React\\sidiro\\src\\components\\Events.component.tsx":"21","E:\\Dev\\React\\sidiro\\src\\components\\UniversalTable.component.tsx":"22","E:\\Dev\\React\\sidiro\\src\\components\\Elevation.component.tsx":"23","E:\\Dev\\React\\sidiro\\src\\components\\Reports.component.tsx":"24","E:\\Dev\\React\\sidiro\\src\\components\\BarChart.component.tsx":"25","E:\\Dev\\React\\sidiro\\src\\components\\PieChart.component.tsx":"26","E:\\Dev\\React\\sidiro\\src\\reducers\\Backdrop.reducer.ts":"27","E:\\Dev\\React\\sidiro\\src\\actions\\Backdrop.action.ts":"28","E:\\Dev\\React\\sidiro\\src\\components\\Backdrop.component.tsx":"29","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\BreakerDevice.component.tsx":"30","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\CurrentTab.component.tsx":"31","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTab.component.tsx":"32","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\TransformerSVG.component.tsx":"33","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\CircuitBreakerSVG.component.tsx":"34","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\GeneratorSVG.component.tsx":"35","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\CouplingBreakerSVG.component.tsx":"36","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\ParametersTableSVG.component.tsx":"37","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\SectionSVG.component.tsx":"38","E:\\Dev\\React\\sidiro\\src\\utilities\\SiemensColors.utility.ts":"39","E:\\Dev\\React\\sidiro\\src\\utilities\\DeviceTypes.utility.ts":"40","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\GeneratorDevice.component.tsx":"41","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\TransformerDevice.component.tsx":"42","E:\\Dev\\React\\sidiro\\src\\utilities\\BreakerStates.utility.ts":"43","E:\\Dev\\React\\sidiro\\src\\hooks\\useUpdateChartFontColor.hook.ts":"44","E:\\Dev\\React\\sidiro\\src\\hooks\\useUpdateChartDatasets.hook.ts":"45","E:\\Dev\\React\\sidiro\\src\\components\\TableWithSort.component.tsx":"46","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\PanelSVG.component.tsx":"47","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CompartmentSVG.component.tsx":"48","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\TestSVG.component.tsx":"49","E:\\Dev\\React\\sidiro\\src\\mock\\elevation.mock.ts":"50","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3WLSVG.component.tsx":"51","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3VAVerticalSVG.component.tsx":"52","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3VAHorizontalSVG.component.tsx":"53","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NP1VerticalSVG.component.tsx":"54","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NJ6SVG.component.tsx":"55","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NJ4SVG.component.tsx":"56","E:\\Dev\\React\\sidiro\\src\\reducers\\Elevation.reducer.ts":"57","E:\\Dev\\React\\sidiro\\src\\actions\\Elevation.action.ts":"58","E:\\Dev\\React\\sidiro\\src\\reducers\\Overview.reducer.ts":"59","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\PowerTab.component.tsx":"60","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\THDITab.component.tsx":"61","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\VoltageLNTab.component.tsx":"62","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\THDUTab.component.tsx":"63","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\VoltageLLTab.component.tsx":"64","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTabCircuitBreakerSVG.component.tsx":"65","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTabTransformerSVG.component.tsx":"66","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTabGeneratorSVG.component.tsx":"67","E:\\Dev\\React\\sidiro\\src\\components\\StackedBarChart.component.tsx":"68","E:\\Dev\\React\\sidiro\\src\\services\\FetchTimeseriesAPI.service.ts":"69","E:\\Dev\\React\\sidiro\\src\\reducers\\SystemTopologyData.reducer.ts":"70","E:\\Dev\\React\\sidiro\\src\\actions\\SystemTopologyData.action.ts":"71","E:\\Dev\\React\\sidiro\\src\\utilities\\DecodeState.utility.ts":"72","E:\\Dev\\React\\sidiro\\src\\workers\\TimeseriesData.worker.js":"73"},{"size":509,"mtime":1614582158684,"results":"74","hashOfConfig":"75"},{"size":425,"mtime":1611564277809,"results":"76","hashOfConfig":"75"},{"size":2836,"mtime":1614594077597,"results":"77","hashOfConfig":"75"},{"size":10504,"mtime":1617776656725,"results":"78","hashOfConfig":"75"},{"size":740,"mtime":1612870262805,"results":"79","hashOfConfig":"75"},{"size":16308,"mtime":1617776868802,"results":"80","hashOfConfig":"75"},{"size":2045,"mtime":1612268307219,"results":"81","hashOfConfig":"75"},{"size":5230,"mtime":1616760014519,"results":"82","hashOfConfig":"75"},{"size":850,"mtime":1617020100117,"results":"83","hashOfConfig":"75"},{"size":517,"mtime":1612947186584,"results":"84","hashOfConfig":"75"},{"size":222,"mtime":1612272726129,"results":"85","hashOfConfig":"75"},{"size":2713,"mtime":1615548166446,"results":"86","hashOfConfig":"75"},{"size":457,"mtime":1612869056672,"results":"87","hashOfConfig":"75"},{"size":169,"mtime":1612340177186,"results":"88","hashOfConfig":"75"},{"size":2201,"mtime":1616656214740,"results":"89","hashOfConfig":"75"},{"size":614,"mtime":1614159398121,"results":"90","hashOfConfig":"75"},{"size":3302,"mtime":1616076184107,"results":"91","hashOfConfig":"75"},{"size":3468,"mtime":1616760027978,"results":"92","hashOfConfig":"75"},{"size":888,"mtime":1616743795467,"results":"93","hashOfConfig":"75"},{"size":448,"mtime":1616743868084,"results":"94","hashOfConfig":"75"},{"size":3791,"mtime":1616745706470,"results":"95","hashOfConfig":"75"},{"size":1558,"mtime":1616745543291,"results":"96","hashOfConfig":"75"},{"size":10147,"mtime":1617708025461,"results":"97","hashOfConfig":"75"},{"size":16108,"mtime":1617001591408,"results":"98","hashOfConfig":"75"},{"size":2155,"mtime":1616770083550,"results":"99","hashOfConfig":"75"},{"size":2029,"mtime":1616770541147,"results":"100","hashOfConfig":"75"},{"size":419,"mtime":1613052032862,"results":"101","hashOfConfig":"75"},{"size":140,"mtime":1613051432655,"results":"102","hashOfConfig":"75"},{"size":730,"mtime":1613051990939,"results":"103","hashOfConfig":"75"},{"size":908,"mtime":1616071365278,"results":"104","hashOfConfig":"75"},{"size":3537,"mtime":1616080701175,"results":"105","hashOfConfig":"75"},{"size":11067,"mtime":1616759952234,"results":"106","hashOfConfig":"75"},{"size":2836,"mtime":1616744432589,"results":"107","hashOfConfig":"75"},{"size":9150,"mtime":1617708053876,"results":"108","hashOfConfig":"75"},{"size":2250,"mtime":1616744431793,"results":"109","hashOfConfig":"75"},{"size":6355,"mtime":1617097480116,"results":"110","hashOfConfig":"75"},{"size":2780,"mtime":1616745068590,"results":"111","hashOfConfig":"75"},{"size":1661,"mtime":1617272760688,"results":"112","hashOfConfig":"75"},{"size":3101,"mtime":1614583804653,"results":"113","hashOfConfig":"75"},{"size":214,"mtime":1616759971315,"results":"114","hashOfConfig":"75"},{"size":1119,"mtime":1614085317035,"results":"115","hashOfConfig":"75"},{"size":1379,"mtime":1616073129400,"results":"116","hashOfConfig":"75"},{"size":69,"mtime":1614156488357,"results":"117","hashOfConfig":"75"},{"size":1433,"mtime":1614607096669,"results":"118","hashOfConfig":"75"},{"size":864,"mtime":1614676311073,"results":"119","hashOfConfig":"75"},{"size":7580,"mtime":1616068315107,"results":"120","hashOfConfig":"75"},{"size":2505,"mtime":1616061717494,"results":"121","hashOfConfig":"75"},{"size":2268,"mtime":1617708194854,"results":"122","hashOfConfig":"75"},{"size":4359,"mtime":1615296134508,"results":"123","hashOfConfig":"75"},{"size":3229,"mtime":1615472604478,"results":"124","hashOfConfig":"75"},{"size":10588,"mtime":1615461167960,"results":"125","hashOfConfig":"75"},{"size":4805,"mtime":1615551015772,"results":"126","hashOfConfig":"75"},{"size":1621,"mtime":1615452447087,"results":"127","hashOfConfig":"75"},{"size":3250,"mtime":1615461224066,"results":"128","hashOfConfig":"75"},{"size":4376,"mtime":1615465096998,"results":"129","hashOfConfig":"75"},{"size":2102,"mtime":1615471322917,"results":"130","hashOfConfig":"75"},{"size":19761,"mtime":1617706211431,"results":"131","hashOfConfig":"75"},{"size":47,"mtime":1615535123127,"results":"132","hashOfConfig":"75"},{"size":11620,"mtime":1617701587067,"results":"133","hashOfConfig":"75"},{"size":4412,"mtime":1616071152468,"results":"134","hashOfConfig":"75"},{"size":3540,"mtime":1616074746904,"results":"135","hashOfConfig":"75"},{"size":3658,"mtime":1616073841466,"results":"136","hashOfConfig":"75"},{"size":3758,"mtime":1616073607458,"results":"137","hashOfConfig":"75"},{"size":3661,"mtime":1616076255506,"results":"138","hashOfConfig":"75"},{"size":4080,"mtime":1617701484623,"results":"139","hashOfConfig":"75"},{"size":1543,"mtime":1616681150507,"results":"140","hashOfConfig":"75"},{"size":956,"mtime":1617776900548,"results":"141","hashOfConfig":"75"},{"size":2345,"mtime":1617000749087,"results":"142","hashOfConfig":"75"},{"size":472,"mtime":1617708792116,"results":"143","hashOfConfig":"75"},{"size":2140,"mtime":1617090959773,"results":"144","hashOfConfig":"75"},{"size":186,"mtime":1617020068436,"results":"145","hashOfConfig":"75"},{"size":369,"mtime":1617707695082,"results":"146","hashOfConfig":"75"},{"size":759,"mtime":1617776130110,"results":"147","hashOfConfig":"75"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},"vdwtrg",{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"150"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"150"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"254"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"150"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"150"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"150"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"150"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"297"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},"E:\\Dev\\React\\sidiro\\src\\index.tsx",[],["307","308"],"E:\\Dev\\React\\sidiro\\src\\reportWebVitals.ts",[],"E:\\Dev\\React\\sidiro\\src\\App.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Drawer.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\routes\\Drawer.routes.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview.component.tsx",["309","310"],"import React from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { TransformerSVG } from './Overview/TransformerSVG.component';\r\nimport { CircuitBreakerSVG } from './Overview/CircuitBreakerSVG.component';\r\nimport { GeneratorSVG } from './Overview/GeneratorSVG.component';\r\nimport { SiemensAccentBlue, SiemensAccentTeal, SiemensAccentYellow } from '../utilities/SiemensColors.utility';\r\nimport { SectionSVG } from './Overview/SectionSVG.component';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../reducers/Root.reducer';\r\nimport { UniversalTabs } from './UniversalTabs.component';\r\nimport { DeviceTypes } from '../utilities/DeviceTypes.utility';\r\nimport { fetchTimeseries } from '../services/FetchTimeseriesAPI.service';\r\nimport { setAssetData } from '../actions/SystemTopologyData.action';\r\nimport { decodeState } from '../utilities/DecodeState.utility';\r\nimport createWorker from \"workerize-loader!../workers/TimeseriesData.worker\"; //eslint-disable-line import/no-webpack-loader-syntax\r\nimport * as Worker from \"../workers/TimeseriesData.worker\";\r\n\r\n//common constants for SVGs to import /////////////////\r\nexport const lineLength = 6;\r\nexport const circleRadius = 0.5 * lineLength;\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    lineStyle: {\r\n      stroke: theme.palette.type === 'dark' ? theme.palette.text.primary : '#000000',\r\n      strokeWidth: lineLength / 25,\r\n      strokeLinecap: 'round'\r\n    },\r\n    circleStyle: {\r\n      stroke: theme.palette.type === 'dark' ? theme.palette.text.primary : '#000000',\r\n      strokeWidth: lineLength / 25,\r\n      strokeLinecap: 'round',\r\n      fill: 'none'\r\n    },\r\n    lineStyleVoltageApplied: {\r\n      strokeWidth: lineLength / 25,\r\n      strokeLinecap: 'round',\r\n      stroke: '#10b115',\r\n    },\r\n    circleStyleVoltageApplied: {\r\n      strokeWidth: lineLength / 25,\r\n      strokeLinecap: 'round',\r\n      fill: 'none',\r\n      stroke: '#10b115',\r\n    },\r\n    generatorSymbolTextStyle: {\r\n      fontSize: `${circleRadius / 10}em`,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentTeal.dark3,\r\n      textAnchor: 'middle',\r\n      dominantBaseline: 'central'\r\n    },\r\n    paramsTableTitleStyle: {\r\n      stroke: theme.palette.type === 'dark' ? SiemensAccentYellow.light3 : SiemensAccentBlue.dark4,\r\n      strokeWidth: lineLength / 64,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.background.paper : SiemensAccentBlue.dark4,\r\n    },\r\n    paramsTableRowStyle: {\r\n      stroke: theme.palette.type === 'dark' ? SiemensAccentYellow.light3 : SiemensAccentBlue.dark4,\r\n      strokeWidth: lineLength / 64,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.background.paper : SiemensAccentBlue.light6,\r\n    },\r\n    paramsTableTitleTextStyle: {\r\n      fontSize: `${circleRadius / 39}em`,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : '#ffffff',\r\n      textAnchor: 'middle',\r\n      dominantBaseline: 'central',\r\n      letterSpacing: '-0.03em'\r\n    },\r\n    paramsTableRowTextStyle: {\r\n      fontSize: `${circleRadius / 36}em`,\r\n      fill: theme.palette.text.primary,\r\n      textAnchor: 'end',\r\n      dominantBaseline: 'central',\r\n      letterSpacing: '-0.02em',\r\n    },\r\n    infeedsNameStyle: {\r\n      fontSize: `${circleRadius / 15}em`,\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentTeal.dark3,\r\n      textAnchor: 'end',\r\n      dominantBaseline: 'hanging',\r\n      letterSpacing: '-0.05em'\r\n    },\r\n    circuitBreakersNameStyle: {\r\n      fill: theme.palette.type === 'dark' ? theme.palette.text.primary : SiemensAccentTeal.dark3,\r\n      textAnchor: 'end',\r\n      dominantBaseline: 'hanging',\r\n      letterSpacing: '-0.05em',\r\n      fontSize: `${circleRadius / 26}em`,\r\n    },\r\n    clickableOverlay: {\r\n      fill: 'rgba(255, 255, 255, 0)',\r\n      \"&:hover, &:focus\": {\r\n        stroke: SiemensAccentYellow.light3,\r\n        strokeWidth: lineLength / 32,\r\n      }\r\n    },\r\n    overviewTabSVGTextsCentralAnchor: {\r\n      fontSize: `${circleRadius / 32}em`,\r\n      fill: theme.palette.text.primary,\r\n      textAnchor: 'middle',\r\n      dominantBaseline: 'central',\r\n      letterSpacing: '-0.02em'\r\n    },\r\n    overviewTabSVGTextsCentralLeftAnchor: {\r\n      fontSize: `${circleRadius / 32}em`,\r\n      fill: theme.palette.text.primary,\r\n      textAnchor: 'start',\r\n      dominantBaseline: 'hanging',\r\n      letterSpacing: '-0.02em'\r\n    },\r\n    svgContainer: {\r\n      overflowX: 'auto',\r\n      whiteSpace: 'nowrap'\r\n    },\r\n    svgElement: {\r\n      minWidth: '1500px',\r\n    }\r\n  }));\r\n///////////////////////////////////////////////////\r\n\r\nconst negativeOffsetX = -4;\r\nconst negativeOffsetY = -3;\r\n\r\nconst TimeseriesWorker = createWorker<typeof Worker>();\r\n\r\nexport const Overview = () => {\r\n  const { t } = useTranslation();\r\n  const classes = useStyles();\r\n  const overview = useSelector((state: RootState) => state.overview);\r\n  const systemTopologyData = useSelector((state: RootState) => state.systemTopologyData);\r\n  const dispatch = useDispatch();\r\n\r\n  const svgViewBoxX = 150;\r\n  const svgViewBoxY = 74;\r\n\r\n  const renderTabsWithCircuitDiagrams = (): Array<{ label: string, content: React.ReactNode }> => {\r\n    let tabs: Array<{ label: string, content: React.ReactNode }> = [];\r\n    overview.diagrams.forEach((diagram, diagramIndex) => {\r\n      const content = (\r\n        <div className={classes.svgContainer}>\r\n          <svg viewBox={`${negativeOffsetX} ${negativeOffsetY} ${svgViewBoxX} ${svgViewBoxY}`} className={classes.svgElement}>\r\n            {renderDiagramName(diagram.name, svgViewBoxX + negativeOffsetX, 0 + negativeOffsetY)}\r\n            {diagram.sections.map((section: any, sectionIndex: any) => {\r\n              const infeeds = section.infeeds?.map((infeed: any, infeedIndex: any) => {\r\n                return renderInfeed(infeed.name,\r\n                  `${t('deviceDataDialog.section')} ${section.name}`,\r\n                  section,\r\n                  infeed.tableName,\r\n                  infeed.breaker,\r\n                  infeed.type,\r\n                  ((svgViewBoxX / diagram.sections.length) / section.infeeds.length) / 2 + infeedIndex * (svgViewBoxX / diagram.sections.length) / section.infeeds.length + sectionIndex * (svgViewBoxX / diagram.sections.length),\r\n                  0)\r\n              })\r\n              ///////////////////////////\r\n              const sectionLines = renderSection(sectionIndex * svgViewBoxX / diagram.sections.length + lineLength / 2, // x\r\n                6 * lineLength, // y\r\n                svgViewBoxX / diagram.sections.length - lineLength, // length\r\n                section, //voltageApplied\r\n                diagram.sections[sectionIndex - 1] !== undefined ? checkSectionVoltageApplied(diagram.sections[sectionIndex - 1]) : false, // previousSectionUnderVoltage\r\n                section.coupling ? {\r\n                  assetID: section.coupling.assetID,\r\n                  name: section.coupling.name,\r\n                  type: section.coupling.type,\r\n                  nextSectionUnderVoltage: diagram.sections[sectionIndex + 1] !== undefined ? checkSectionVoltageApplied(diagram.sections[sectionIndex + 1]) : false,\r\n                  fixedState: section.coupling.state\r\n                } :\r\n                  false)\r\n              const breakers = section.breakers?.map((breaker: any, breakerIndex: any) => {\r\n                const nextSwitchboardIndex = overview.diagrams.findIndex(diagram => diagram.name === breaker.nextSwitchboardName);\r\n                return renderBreaker(breaker.name,\r\n                  `${diagram.name} ${t('deviceDataDialog.section')} ${section.name}`,\r\n                  section,\r\n                  breaker.tableName,\r\n                  breaker.type,\r\n                  breaker.assetID,\r\n                  sectionIndex * svgViewBoxX / diagram.sections.length + lineLength / 2 + breakerIndex * lineLength * 1.2,\r\n                  6 * lineLength,\r\n                  nextSwitchboardIndex !== -1 ? nextSwitchboardIndex : undefined,\r\n                  undefined,\r\n                  undefined,\r\n                  breaker.state\r\n                )\r\n              })\r\n              return <React.Fragment key={sectionIndex}>{infeeds}{sectionLines}{breakers}</React.Fragment>\r\n\r\n            })}\r\n          </svg>\r\n        </div>\r\n      )\r\n      return tabs.push({ label: diagram.name, content: content })\r\n    })\r\n    return tabs\r\n  }\r\n\r\n  const renderDiagramName = (name: string, x: number, y: number) => {\r\n    return (\r\n      <text\r\n        x={x}\r\n        y={y}\r\n        className={classes.infeedsNameStyle}\r\n      >\r\n        {`${t('overviewPage.switchboard')} ${name}`}\r\n      </text>\r\n    )\r\n  }\r\n\r\n  const renderInfeed = (name: string, sectionName: string, sectionObject: object, tableName: string, breaker: { name: string, type: string, tableName: string, assetID: string, state?: number }, type: string, x: number, y: number) => {\r\n    switch (type) {\r\n      case DeviceTypes.transformer:\r\n        return (\r\n          <React.Fragment key={`${x}-${y}`}>\r\n            <TransformerSVG\r\n              x={x}\r\n              y={y}\r\n              name={name}\r\n              tableName={tableName}\r\n              activePower={systemTopologyData[breaker.assetID]?.Active_Power_Import || 0}\r\n              current={sumCurrent(systemTopologyData[breaker.assetID]?.Current_L1, systemTopologyData[breaker.assetID]?.Current_L2, systemTopologyData[breaker.assetID]?.Current_L3)}\r\n              powerFactor={calculatePowerFactor(systemTopologyData[breaker.assetID]?.Active_Power_Import, systemTopologyData[breaker.assetID]?.Reactive_Power_Import)}\r\n              breakerName={breaker.name}\r\n              sectionName={sectionName}\r\n              voltageApplied={checkSectionVoltageApplied(sectionObject) && checkBreakerState(breaker.assetID).closed}\r\n            />\r\n            {renderBreaker(breaker.name, sectionName, sectionObject, '', breaker.type, breaker.assetID, x, y + 3 * lineLength, undefined, undefined, undefined, breaker.state, true)}\r\n          </React.Fragment>\r\n        )\r\n      case DeviceTypes.generator:\r\n        return (\r\n          <React.Fragment key={`${x}-${y}`}>\r\n            <GeneratorSVG\r\n              x={x}\r\n              y={y}\r\n              name={name}\r\n              tableName={tableName}\r\n              activePower={systemTopologyData[breaker.assetID]?.Active_Power_Import || 0}\r\n              current={sumCurrent(systemTopologyData[breaker.assetID]?.Current_L1, systemTopologyData[breaker.assetID]?.Current_L2, systemTopologyData[breaker.assetID]?.Current_L3)}\r\n              powerFactor={calculatePowerFactor(systemTopologyData[breaker.assetID]?.Active_Power_Import, systemTopologyData[breaker.assetID]?.Reactive_Power_Import)}\r\n              breakerName={breaker.name}\r\n              sectionName={sectionName}\r\n              voltageApplied={checkSectionVoltageApplied(sectionObject) && checkBreakerState(breaker.assetID).closed}\r\n            />\r\n            {renderBreaker(breaker.name, sectionName, sectionObject, '', breaker.type, breaker.assetID, x, y + 3 * lineLength, undefined, undefined, undefined, breaker.state, true)}\r\n          </React.Fragment>\r\n        )\r\n      case '': //no infeed - for distribution boards to not show gen/tr and table above cb\r\n        const previousSwitchboardIndex = overview.diagrams.findIndex(diagram => diagram.name === breaker.tableName)\r\n        return renderBreaker(breaker.name, sectionName, sectionObject, breaker.tableName, breaker.type, breaker.assetID, x, y + 3 * lineLength, undefined, true, previousSwitchboardIndex !== -1 ? previousSwitchboardIndex : undefined, breaker.state)\r\n      default:\r\n        return renderBreaker(breaker.name, sectionName, sectionObject, '', breaker.type, breaker.assetID, x, y + 3 * lineLength)\r\n    }\r\n  }\r\n\r\n  const renderBreaker = (name: string,\r\n    sectionName: string,\r\n    sectionObject: object,\r\n    tableName: string | undefined,\r\n    type: string,\r\n    assetID: string,\r\n    x: number,\r\n    y: number,\r\n    nextSwitchboardIndex: number | undefined = undefined,\r\n    tableAbove: boolean | undefined = undefined,\r\n    previousSwitchboardIndex: number | undefined = undefined,\r\n    fixedState: number | undefined = undefined,\r\n    infeedBreaker: boolean | undefined = undefined // reversed voltageAbove with voltageBelow\r\n  ) => {\r\n\r\n    switch (type) {\r\n      case DeviceTypes.circuitBreaker:\r\n      case DeviceTypes.infeedBreaker:\r\n      case DeviceTypes.drawOutCircuitBreaker:\r\n        return (\r\n          <CircuitBreakerSVG\r\n            key={`${x}-${y}`}\r\n            x={x}\r\n            y={y}\r\n            state={fixedState !== undefined ? decodeState(fixedState) : decodeState(systemTopologyData[assetID]?.Breaker_State) || false}\r\n            name={name}\r\n            tableName={tableName}\r\n            activePower={systemTopologyData[assetID]?.Active_Power_Import || 0}\r\n            current={sumCurrent(systemTopologyData[assetID]?.Current_L1, systemTopologyData[assetID]?.Current_L2, systemTopologyData[assetID]?.Current_L3)}\r\n            powerFactor={calculatePowerFactor(systemTopologyData[assetID]?.Active_Power_Import, systemTopologyData[assetID]?.Reactive_Power_Import)}\r\n            noTable={tableName === undefined}\r\n            nextSwitchboardIndex={nextSwitchboardIndex}\r\n            previousSwitchboardIndex={previousSwitchboardIndex}\r\n            tableAbove={tableAbove}\r\n            sectionName={sectionName}\r\n            deviceType={type}\r\n            drawOut={type === DeviceTypes.drawOutCircuitBreaker}\r\n            voltageBelow={infeedBreaker ? checkSectionVoltageApplied(sectionObject) : decodeState(systemTopologyData[assetID]?.Breaker_State).closed && checkSectionVoltageApplied(sectionObject)}\r\n            voltageAbove={infeedBreaker ? checkVoltageApplied(assetID) : checkSectionVoltageApplied(sectionObject)}\r\n          />\r\n        )\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  const renderSection = (x: number,\r\n    y: number,\r\n    length: number,\r\n    section: object,\r\n    previousSectionUnderVoltage: boolean,\r\n    endCoupling?: {\r\n      assetID: string,\r\n      name: string,\r\n      type: string,\r\n      nextSectionUnderVoltage: boolean,\r\n      fixedState: number\r\n    } | false) => {\r\n\r\n    return (\r\n      <SectionSVG\r\n        key={`${x}-${y}`}\r\n        x={x}\r\n        y={y}\r\n        length={length}\r\n        voltageApplied={checkSectionVoltageApplied(section)}\r\n        nextSectionVoltageApplied={endCoupling ? endCoupling.nextSectionUnderVoltage : false}\r\n        endCoupling={endCoupling ?\r\n          <CircuitBreakerSVG\r\n            x={x + length}\r\n            y={y - 3 * lineLength}\r\n            state={endCoupling.fixedState !== undefined ? decodeState(endCoupling.fixedState) : decodeState(systemTopologyData[endCoupling.assetID]?.Breaker_State)}\r\n            name={endCoupling.name}\r\n            //voltageApplied={false}\r\n            drawOut={endCoupling.type === DeviceTypes.drawOutCircuitBreaker}\r\n            deviceType={endCoupling.type}\r\n            sectionName=''\r\n            voltageBelow={checkSectionVoltageApplied(section) || previousSectionUnderVoltage}\r\n            voltageAbove={endCoupling ? endCoupling.nextSectionUnderVoltage : false}\r\n          />\r\n          : false}\r\n      />\r\n    )\r\n  }\r\n\r\n  const calculatePowerFactor = (P: number, Q: number) => {\r\n    const result = parseFloat((P / (Math.sqrt(Math.pow(P, 2) + Math.pow(Q, 2)))).toFixed(2))\r\n    if (isNaN(result)) {\r\n      return 0\r\n    }\r\n    else {\r\n      return result\r\n    }\r\n  }\r\n\r\n  const sumCurrent = (L1: number, L2: number, L3: number) => {\r\n    const result = parseFloat((L1 + L2 + L3).toFixed(2))\r\n    if (isNaN(result)) {\r\n      return 0\r\n    }\r\n    else {\r\n      return result\r\n    }\r\n  }\r\n\r\n  const checkVoltageApplied = (deviceID: string) => {\r\n    const voltage = Math.max(systemTopologyData[deviceID]?.Voltage_L1_N, systemTopologyData[deviceID]?.Voltage_L2_N, systemTopologyData[deviceID]?.Voltage_L3_N)\r\n    return voltage > 0 ? true : false\r\n  }\r\n\r\n  const checkSectionVoltageApplied = (section: any) => {\r\n    return section.breakers.filter((breaker: any) => checkVoltageApplied(breaker.assetID)).length > 0 ? true : false\r\n  }\r\n\r\n  const checkBreakerState = (assetID: string) => {\r\n    return decodeState(systemTopologyData[assetID]?.Breaker_State)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <UniversalTabs\r\n            name='overview'\r\n            tabs={renderTabsWithCircuitDiagrams()}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","E:\\Dev\\React\\sidiro\\src\\i18n.ts",[],"E:\\Dev\\React\\sidiro\\src\\translations.ts",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\Root.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\UniversalTabs.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\UniversalTabs.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\UniversalTabs.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\LanguageDialog.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\LanguageDialog.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\LanguageDialog.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Powermonitor.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\LineChart.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\DeviceDataDialog.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\DeviceDataDialog.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\Events.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\UniversalTable.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Reports.component.tsx",["311","312"],"import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { BarChart } from './BarChart.component';\r\nimport { PieChart } from './PieChart.component';\r\nimport { SiemensColors, SiemensAccentBlue, SiemensAccentRed, SiemensAccentYellow } from '../utilities/SiemensColors.utility';\r\nimport { LineChart } from './LineChart.component';\r\nimport { UniversalTabs } from './UniversalTabs.component';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport { UniversalTable } from './UniversalTable.component';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { StackedBarChart } from './StackedBarChart.component';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    select: {\r\n      width: '100%'\r\n    }\r\n  }),\r\n);\r\n\r\nexport const Reports = () => {\r\n  const { t } = useTranslation();\r\n  const [sampleData1, setSampleData1] = React.useState<Array<number>>([2478, 5267, 734, 784, 55])\r\n  const [productionTotal, setProductionTotal] = React.useState<Array<number>>([100, 100, 100, 100, 100, 100])\r\n  const [line37, setLine37] = React.useState<Array<number>>([100, 100, 100, 100, 100])\r\n  const [sampleTimeSeriesData, setSampleTimeSeriesData] = React.useState<Array<{ t: number | Date, y: number }>>([{ t: new Date(2021, 1, 1), y: 10 }, { t: new Date(2021, 1, 5), y: 10 }, { t: new Date(2021, 1, 9), y: 10 }])\r\n  const [dateFrom, changeDateFrom] = React.useState<Date | null>(new Date(new Date().setMonth(new Date().getMonth() - 1)));\r\n  const classes = useStyles()\r\n  const [energyType, setEnergyType] = React.useState('0');\r\n\r\n  const handleEnergyType = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setEnergyType(event.target.value as string);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    let interval = setInterval(() => {\r\n      setSampleData1(sampleData1.map(() => Math.round(Math.random() * 1000) / 10))\r\n      setProductionTotal(productionTotal.map(() => Math.round(Math.random() * 1000) / 20))\r\n      setLine37(line37.map(() => Math.round(Math.random() * 1000) / 40))\r\n\r\n\r\n      setSampleTimeSeriesData(sampleTimeSeriesData.map((data) => {\r\n        return {\r\n          t: data.t,\r\n          y: Math.round(Math.random() * 100) / 100\r\n        }\r\n      }))\r\n    }, 10000)\r\n    return () => clearInterval(interval)\r\n  }, [sampleData1, sampleTimeSeriesData, productionTotal, line37])\r\n\r\n  const energyConsumptionTab = (\r\n    <Grid container spacing={2} >\r\n      <Grid item xs={12} md={8} lg={8} xl={10}>\r\n        <DatePicker\r\n          cancelLabel={t('datePicker.cancelButton')}\r\n          autoOk\r\n          label={'Wybierz miesiąc'}\r\n          value={dateFrom}\r\n          onChange={changeDateFrom}\r\n          fullWidth\r\n          views={['month']}\r\n          format=\"MM/yyyy\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} md={2} lg={2} xl={1}>\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Eksport PDF\r\n      </Button>\r\n      </Grid>\r\n      <Grid item xs={12} md={2} lg={2} xl={1}>\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Eksport CSV\r\n      </Button>\r\n      </Grid>\r\n      <Grid item xs={12} style={{ marginBottom: '0px', marginTop: '30px' }}>\r\n        <Typography gutterBottom variant=\"h5\">Całościowe zużycie energii czynnej</Typography>\r\n      </Grid>\r\n      <Grid item xs={12} md={5}>\r\n        <PieChart\r\n          chartTitle=\"\"\r\n          data={{\r\n            labels: [\"HVPP-4\", \"HVPP-2\", \"HVPP-3\", \"Samochody elektryczne\"],\r\n            datasets: [\r\n              {\r\n                label: \"\",\r\n                backgroundColor: [SiemensColors.tealLight, SiemensColors.redDark, SiemensColors.redLight, SiemensColors.blueDark, SiemensColors.yellowDark],\r\n                data: sampleData1\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n\r\n      </Grid>\r\n      <Grid item xs={12} md={7}>\r\n        <UniversalTable\r\n          columns={['Nazwa grupy', 'Zużycie energii czynnej']}\r\n          rows={[['Produkcja', `${sampleData1[0]} kWh`], ['Magazyny', `${sampleData1[1]} kWh`], ['Biura', `${sampleData1[2]} kWh`], ['Ładowanie samochodów', `${sampleData1[3]} kWh`], ['Zużycie całkowite', `${sampleData1[0] + sampleData1[1] + sampleData1[2] + sampleData1[3]} kWh`]]}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Divider />\r\n      </Grid>\r\n      {/* NEXTLEVEL */}\r\n      <Grid item xs={12} style={{ marginBottom: '0px', marginTop: '30px' }}>\r\n        <Typography gutterBottom variant=\"h5\">Production total</Typography>\r\n      </Grid>\r\n      <Grid item xs={12} md={5}>\r\n        <PieChart\r\n          chartTitle=\"\"\r\n          data={{\r\n            labels: [\"Linia produkcyjna L34\", \"Linia produkcyjna L35\", \"Linia produkcyjna L36\", \"Linia produkcyjna L37\", \"Stacja budynkowa dla linii produkcyjnych\", \"Ogrzewanie, chłodzenie, sprężone powietrze\"],\r\n            datasets: [\r\n              {\r\n                label: \"\",\r\n                backgroundColor: [SiemensAccentBlue.dark3, SiemensAccentBlue.light1, SiemensAccentRed.dark3, SiemensAccentRed.light1, SiemensAccentYellow.dark3, SiemensAccentYellow.light1],\r\n                data: productionTotal\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} md={7}>\r\n        <UniversalTable\r\n          columns={['Nazwa grupy', 'Zużycie energii czynnej']}\r\n          rows={[['Linia produkcyjna L34', `${productionTotal[0]} kWh`], ['Linia produkcyjna L35', `${productionTotal[1]} kWh`], ['Linia produkcyjna L36', `${productionTotal[2]} kWh`], ['Linia produkcyjna L37', `${productionTotal[3]} kWh`],\r\n          ['Stacja budynkowa dla linii produkcyjnych', `${productionTotal[4]} kWh`], ['Ogrzewanie, chłodzenie, sprężone powietrze', `${productionTotal[5]} kWh`], ['Zużycie całkowite', `${productionTotal[0] + productionTotal[1] + productionTotal[2] + productionTotal[3] + productionTotal[4] + productionTotal[5]} kWh`]]}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Divider />\r\n      </Grid>\r\n\r\n      {/* NEXTLEVEL */}\r\n      <Grid item xs={12} style={{ marginBottom: '0px', marginTop: '30px' }}>\r\n        <Typography gutterBottom variant=\"h5\">Line 37</Typography>\r\n      </Grid>\r\n      <Grid item xs={12} md={5}>\r\n        <PieChart\r\n          chartTitle=\"\"\r\n          data={{\r\n            labels: [\"Formowanie\", \"Nawijanie\", \"Mieszanie\", \"Blender RB37\", \"Mikser ZTM37\"],\r\n            datasets: [\r\n              {\r\n                label: \"\",\r\n                backgroundColor: [SiemensAccentBlue.dark3, SiemensAccentBlue.light1, SiemensAccentRed.dark3, SiemensAccentRed.light1, SiemensAccentYellow.dark3],\r\n                data: line37\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} md={7}>\r\n        <UniversalTable\r\n          columns={['Nazwa grupy', 'Zużycie energii czynnej']}\r\n          rows={[['Formowanie', `${line37[0]} kWh`], ['Nawijanie', `${line37[1]} kWh`], ['Mieszanie', `${line37[2]} kWh`], ['Blender RB37', `${line37[3]} kWh`],\r\n          ['Mikser ZTM37', `${line37[4]} kWh`], ['Zużycie całkowite', `${line37[0] + line37[1] + line37[2] + line37[3] + line37[4]} kWh`]]}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Divider />\r\n      </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      {/* <BarChart\r\n          chartTitle=\"barchart\"\r\n          data={{\r\n            labels: [\"Africa\", \"Asia\", \"Europe\", \"Latin America\", \"North Americaa\"],\r\n            datasets: [\r\n              {\r\n                label: \"Population (millions)\",\r\n                backgroundColor: [SiemensColorsAlpha.tealLightAlpha, SiemensColorsAlpha.redDarkAlpha, SiemensColorsAlpha.redLightAlpha, SiemensColorsAlpha.blueDarkAlpha, SiemensColorsAlpha.yellowDarkAlpha],\r\n                borderColor: [SiemensColors.tealLight, SiemensColors.redDark, SiemensColors.redLight, SiemensColors.blueDark, SiemensColors.yellowDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n                \r\n              }\r\n            ]\r\n          }} \r\n          /> */}\r\n\r\n      <Grid item xs={12}>\r\n        {/* <PieChart\r\n          chartTitle=\"something\"\r\n          data={{\r\n            labels: [\"Africa\", \"Asia\", \"Europe\", \"Latin America\", \"North Americaa\"],\r\n            datasets: [\r\n              {\r\n                label: \"Population (millions)\",\r\n                backgroundColor: [SiemensColors.tealLight, SiemensColors.redDark, SiemensColors.redLight, SiemensColors.blueDark, SiemensColors.yellowDark],\r\n                data: sampleData1\r\n              }\r\n            ]\r\n          }} \r\n          /> */}\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        {/* <LineChart\r\n          data={{\r\n            datasets: [\r\n              {\r\n                label: \"dataset1\",\r\n                backgroundColor: SiemensColors.tealLight,\r\n                borderColor: SiemensColors.tealLight,\r\n                fill: false,\r\n                lineTension: 0,\r\n                data: sampleTimeSeriesData\r\n              },\r\n              {\r\n                label: \"dataset2\",\r\n                backgroundColor: SiemensColors.yellowDark,\r\n                borderColor: SiemensColors.yellowDark,\r\n                fill: false,\r\n                lineTension: 0,\r\n                data: [{ t: new Date(2021, 1, 1), y: 5 }, { t: new Date(2021, 1, 5), y: 7 }, { t: new Date(2021, 1, 9), y: 6 }]\r\n              }\r\n            ]\r\n          }} \r\n          /> */}\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n\r\n  const usageProfileTab = (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={12} md={5} lg={5}>\r\n        <DatePicker\r\n          cancelLabel={t('datePicker.cancelButton')}\r\n          autoOk\r\n          label={'Wybierz miesiąc'}\r\n          value={dateFrom}\r\n          onChange={changeDateFrom}\r\n          fullWidth\r\n          views={['month']}\r\n          format=\"MM/yyyy\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} md={3} lg={3}>\r\n        <FormControl className={classes.select}>\r\n          <InputLabel id=\"breaker-select-label\">Energia</InputLabel>\r\n          <Select\r\n            fullWidth\r\n            labelId=\"breaker-select-label\"\r\n            id=\"breaker-select\"\r\n            value={energyType}\r\n            onChange={handleEnergyType}\r\n          >\r\n            <MenuItem value={0}>Energia czynna</MenuItem>\r\n            <MenuItem value={10}>Energia bierna indukcyjna</MenuItem>\r\n            <MenuItem value={20}>Energia bierna pojemnościowa</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={12} md={2} lg={2}>\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Eksport PDF\r\n      </Button>\r\n      </Grid>\r\n      <Grid item xs={12} md={2} lg={2}>\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Eksport CSV\r\n      </Button>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <StackedBarChart\r\n          chartTitle=\"\"\r\n          data={{\r\n            labels: ['Standing costs', 'Running costs'], // responsible for how many bars are gonna show on the chart\r\n            // create 12 datasets, since we have 12 items\r\n            // data[0] = labels[0] (data for first bar - 'Standing costs') | data[1] = labels[1] (data for second bar - 'Running costs')\r\n            // put 0, if there is no data for the particular bar\r\n            datasets: [{\r\n               label: 'Washing and cleaning',\r\n               data: [0, 8],\r\n               backgroundColor: '#22aa99'\r\n            }, {\r\n               label: 'Traffic tickets',\r\n               data: [0, 2],\r\n               backgroundColor: '#994499'\r\n            }, {\r\n               label: 'Tolls',\r\n               data: [0, 1],\r\n               backgroundColor: '#316395'\r\n            }, {\r\n               label: 'Parking',\r\n               data: [5, 2],\r\n               backgroundColor: '#b82e2e'\r\n            }, {\r\n               label: 'Car tax',\r\n               data: [0, 1],\r\n               backgroundColor: '#66aa00'\r\n            }, {\r\n               label: 'Repairs and improvements',\r\n               data: [0, 2],\r\n               backgroundColor: '#dd4477'\r\n            }, {\r\n               label: 'Maintenance',\r\n               data: [6, 1],\r\n               backgroundColor: '#0099c6'\r\n            }, {\r\n               label: 'Inspection',\r\n               data: [0, 2],\r\n               backgroundColor: '#990099'\r\n            }, {\r\n               label: 'Loan interest',\r\n               data: [0, 3],\r\n               backgroundColor: '#109618'\r\n            }, {\r\n               label: 'Depreciation of the vehicle',\r\n               data: [0, 2],\r\n               backgroundColor: '#109618'\r\n            }, {\r\n               label: 'Fuel',\r\n               data: [0, 1],\r\n               backgroundColor: '#dc3912'\r\n            }, {\r\n               label: 'Insurance and Breakdown cover',\r\n               data: [4, 0],\r\n               backgroundColor: '#3366cc'\r\n            }]\r\n         }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} style={{ marginBottom: '0px', marginTop: '30px' }}>\r\n        <Typography gutterBottom variant=\"h5\">Całościowa energia czynna</Typography>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n\r\n  const outgoingFeedersParameters = (\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={12} md={5} lg={5}>\r\n        <FormControl className={classes.select}>\r\n          <InputLabel id=\"breaker-select-label\">Wybierz rozdzielnicę</InputLabel>\r\n          <Select\r\n            fullWidth\r\n            labelId=\"breaker-select-label\"\r\n            id=\"breaker-select\"\r\n            value={energyType}\r\n            onChange={handleEnergyType}\r\n          >\r\n            <MenuItem value={0}>HVPP-1</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={12} md={3} lg={3}>\r\n        <FormControl className={classes.select}>\r\n          <InputLabel id=\"breaker-select-label\">Wybierz odbiór</InputLabel>\r\n          <Select\r\n            fullWidth\r\n            labelId=\"breaker-select-label\"\r\n            id=\"breaker-select\"\r\n            value={energyType}\r\n            onChange={handleEnergyType}\r\n          >\r\n            <MenuItem value={0}>QT01</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={12} md={2} lg={2}>\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Eksport PDF\r\n      </Button>\r\n      </Grid>\r\n      <Grid item xs={12} md={2} lg={2}>\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Eksport CSV\r\n      </Button>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12}>\r\n          <Typography variant='h2' gutterBottom>{t('reportsPage.title')}</Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <UniversalTabs\r\n        name='Reports'\r\n        tabs={[\r\n          {\r\n            label: 'Miesięczne zużycie energii',\r\n            content: energyConsumptionTab\r\n          },\r\n          {\r\n            label: 'Profil zużycia energii',\r\n            content: usageProfileTab\r\n          },\r\n          {\r\n            label: 'Moce 15-minutowe',\r\n            content: <p>Power demand tab content</p>\r\n          },\r\n          {\r\n            label: 'Parametry zasilania',\r\n            content: <p>Supply parameters tab content</p>\r\n          },\r\n          {\r\n            label: 'Parametry odbiorów',\r\n            content: outgoingFeedersParameters\r\n          }\r\n        ]}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}","E:\\Dev\\React\\sidiro\\src\\components\\BarChart.component.tsx",[],["313","314"],"E:\\Dev\\React\\sidiro\\src\\components\\PieChart.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\Backdrop.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\Backdrop.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\Backdrop.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\BreakerDevice.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\CurrentTab.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTab.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\TransformerSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\CircuitBreakerSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\GeneratorSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\CouplingBreakerSVG.component.tsx",[],["315","316"],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\ParametersTableSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\SectionSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\utilities\\SiemensColors.utility.ts",[],"E:\\Dev\\React\\sidiro\\src\\utilities\\DeviceTypes.utility.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\GeneratorDevice.component.tsx",[],["317","318"],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\TransformerDevice.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\utilities\\BreakerStates.utility.ts",[],"E:\\Dev\\React\\sidiro\\src\\hooks\\useUpdateChartFontColor.hook.ts",[],"E:\\Dev\\React\\sidiro\\src\\hooks\\useUpdateChartDatasets.hook.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\TableWithSort.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\PanelSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CompartmentSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\TestSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\mock\\elevation.mock.ts",[],["319","320"],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3WLSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3VAVerticalSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3VAHorizontalSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NP1VerticalSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NJ6SVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NJ4SVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\Elevation.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\Elevation.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\Overview.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\PowerTab.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\THDITab.component.tsx",["321"],"import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { SiemensAccentTeal, SiemensAccentGreen, SiemensAccentRed, SiemensAccentBlue } from '../../utilities/SiemensColors.utility';\r\nimport { DatePicker, TimePicker } from \"@material-ui/pickers\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    timePickersContainer: {\r\n      marginTop: theme.spacing(2),\r\n      paddingTop: theme.spacing(2),\r\n      paddingBottom: theme.spacing(2),\r\n    }\r\n  }),\r\n);\r\n\r\nexport const THDITab = () => {\r\n  const [dateFrom, changeDateFrom] = React.useState<Date | null>(new Date());\r\n  const classes = useStyles();\r\n  const { t } = useTranslation();\r\n  const [l1, setL1] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n  const [l2, setL2] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n  const [l3, setL3] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n\r\n  const generateSampleData = () => {\r\n    let arr1 = []\r\n    let arr2 = []\r\n    let arr3 = []\r\n    for (let i = 0; i < 25; i++) {\r\n      arr1.push({\r\n        t: new Date(2021, 2, i+1, 1),\r\n        y: 30+ Math.random()*10\r\n      })\r\n      arr2.push({\r\n        t: new Date(2021, 2, i+1, 1),\r\n        y: 30+ Math.random()*10\r\n      })\r\n      arr3.push({\r\n        t: new Date(2021, 2, i+1, 1),\r\n        y: 4\r\n      })\r\n    }\r\n    setL1(arr1)\r\n    setL2(arr2)\r\n    setL3(arr3)\r\n  }\r\n\r\n  React.useEffect(()=>{\r\n    generateSampleData()\r\n  },[])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <LineChart\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  label: \"THD I L1 [%]\",\r\n                  backgroundColor: SiemensAccentTeal.light1,\r\n                  borderColor: SiemensAccentTeal.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l1\r\n                },\r\n                {\r\n                  label: \"THD I L2 [%]\",\r\n                  backgroundColor: SiemensAccentRed.light1,\r\n                  borderColor: SiemensAccentRed.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l2\r\n                },\r\n                {\r\n                  label: \"THD I L3 [%]\",\r\n                  backgroundColor: SiemensAccentGreen.light1,\r\n                  borderColor: SiemensAccentGreen.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l3\r\n                }\r\n              ]\r\n            }} />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={2} className={classes.timePickersContainer}>\r\n        <Grid item xs={12} md={6}>\r\n          <DatePicker\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={changeDateFrom}\r\n            fullWidth\r\n            disableFuture\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TimePicker\r\n            ampm={false}\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={changeDateFrom}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\VoltageLNTab.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\THDUTab.component.tsx",["322"],"import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { SiemensAccentTeal, SiemensAccentGreen, SiemensAccentRed, SiemensAccentBlue } from '../../utilities/SiemensColors.utility';\r\nimport { DatePicker, TimePicker } from \"@material-ui/pickers\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    timePickersContainer: {\r\n      marginTop: theme.spacing(2),\r\n      paddingTop: theme.spacing(2),\r\n      paddingBottom: theme.spacing(2),\r\n    }\r\n  }),\r\n);\r\n\r\nexport const THDUTab = () => {\r\n  const [dateFrom, changeDateFrom] = React.useState<Date | null>(new Date());\r\n  const classes = useStyles();\r\n  const { t } = useTranslation();\r\n  const [l1, setL1] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n  const [l2, setL2] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n  const [l3, setL3] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n\r\n  const generateSampleData = () => {\r\n    console.log(parseInt((new Date('2021.01.01').getTime() / 1000).toFixed(0)))\r\n    let arr1 = []\r\n    let arr2 = []\r\n    let arr3 = []\r\n    for (let i = 0; i <= 120; i++) {\r\n      arr1.push({\r\n        t: parseInt((new Date('2021.01.01').getTime()).toFixed(0)) + i*1000,\r\n        y: 1+ Math.random()*10\r\n      })\r\n      arr2.push({\r\n        t: parseInt((new Date('2021.01.01').getTime()).toFixed(0)) + i*1000, //minutes\r\n        y: 1+ Math.random()*10\r\n      })\r\n      arr3.push({\r\n        t: parseInt((new Date('2021.01.01').getTime()).toFixed(0)) + i*1000, //minutes\r\n        y: 4\r\n      })\r\n    }\r\n    setL1(arr1)\r\n    setL2(arr2)\r\n    setL3(arr3)\r\n  }\r\n\r\n  React.useEffect(()=>{\r\n    generateSampleData()\r\n  },[])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <LineChart\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  label: \"THD U L1 [%]\",\r\n                  backgroundColor: SiemensAccentTeal.light1,\r\n                  borderColor: SiemensAccentTeal.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l1\r\n                },\r\n                {\r\n                  label: \"THD U L2 [%]\",\r\n                  backgroundColor: SiemensAccentRed.light1,\r\n                  borderColor: SiemensAccentRed.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l2\r\n                },\r\n                {\r\n                  label: \"THD U L3 [%]\",\r\n                  backgroundColor: SiemensAccentGreen.light1,\r\n                  borderColor: SiemensAccentGreen.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l3\r\n                }\r\n              ]\r\n            }} />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={2} className={classes.timePickersContainer}>\r\n        <Grid item xs={12} md={6}>\r\n          <DatePicker\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={changeDateFrom}\r\n            fullWidth\r\n            disableFuture\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TimePicker\r\n            ampm={false}\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={changeDateFrom}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\VoltageLLTab.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTabCircuitBreakerSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTabTransformerSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTabGeneratorSVG.component.tsx",["323"],"import React from 'react';\r\nimport { lineLength, circleRadius, useStyles } from '../Overview.component';\r\nimport { IOverviewTabTransformerSVG } from './OverviewTabTransformerSVG.component';\r\n\r\nexport const OverviewTabGeneratorSVG: React.FC<IOverviewTabTransformerSVG> = ({ x, y, name, voltageApplied }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* circle, 'G' symbol & end line */}\r\n      <circle\r\n        cx={x}\r\n        cy={y + circleRadius}\r\n        r={circleRadius}\r\n        className={voltageApplied ? classes.circleStyleVoltageApplied : classes.circleStyle}\r\n      />\r\n      <text\r\n        x={x}\r\n        y={y + circleRadius}\r\n        className={classes.generatorSymbolTextStyle}\r\n      >\r\n        G\r\n      </text>\r\n\r\n      <text\r\n        x={x + circleRadius}\r\n        y={y}\r\n        className={classes.overviewTabSVGTextsCentralLeftAnchor}\r\n      >\r\n        &nbsp;&nbsp;{name}\r\n      </text>\r\n    </React.Fragment>\r\n  )\r\n}","E:\\Dev\\React\\sidiro\\src\\components\\StackedBarChart.component.tsx",["324"],"import Chart from 'chart.js';\r\nimport React, { useRef, useState, useEffect, useMemo } from 'react';\r\nimport { PieChartProps } from './PieChart.component';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { SiemensAccentYellow } from '../utilities/SiemensColors.utility';\r\nimport { useUpdateChartFontColor } from '../hooks/useUpdateChartFontColor.hook';\r\nimport { useUpdateChartDatasets } from '../hooks/useUpdateChartDatasets.hook';\r\n\r\ninterface BarChartProps {\r\n  data: {\r\n    labels?: Array<string>,\r\n    datasets: Array<{ label: string, backgroundColor: string, borderColor?: Array<string>, borderWidth?: number, data: Array<number> }>\r\n  },\r\n  chartTitle?: string,\r\n  horizontal?: boolean\r\n}\r\n\r\nexport const StackedBarChart: React.FC<BarChartProps> = ({ data, chartTitle, horizontal }) => {\r\n  const chartContainer = useRef() as React.MutableRefObject<HTMLCanvasElement>;\r\n  const [chartInstance, setChartInstance] = useState<Chart | null>(null);\r\n  const theme = useTheme();\r\n  useUpdateChartFontColor(chartInstance, SiemensAccentYellow.light6);\r\n  useUpdateChartDatasets(chartInstance, data)\r\n\r\n  const chartConfig = useMemo(() => {\r\n    return {\r\n      type: horizontal ? 'horizontalBar' : 'bar',\r\n      data,\r\n      options: {\r\n        scales: {\r\n          yAxes: [{\r\n            stacked: true,\r\n            ticks: {\r\n              fontColor: theme.palette.type === 'dark' ? SiemensAccentYellow.light6 : '#666'\r\n            }\r\n          }],\r\n          xAxes: [{\r\n            stacked: true,\r\n            ticks: {\r\n              fontColor: theme.palette.type === 'dark' ? SiemensAccentYellow.light6 : '#666'\r\n            }\r\n          }]\r\n        },\r\n        title: {\r\n          display: chartTitle ? true : false,\r\n          text: chartTitle ? chartTitle : '',\r\n          fontColor: theme.palette.type === 'dark' ? SiemensAccentYellow.light6 : '#666',\r\n          fontFamily: 'Roboto, Helvetica, Arial, sans-serif',\r\n        }\r\n      }\r\n    }\r\n  }, [data, chartTitle, horizontal, theme.palette.type]);\r\n\r\n  useEffect(() => {\r\n    //instantiate chart with first given data\r\n    if (chartInstance === null) {\r\n      setChartInstance(new Chart(chartContainer.current, chartConfig))\r\n    }\r\n  }, [chartInstance, chartConfig])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <canvas ref={chartContainer} />\r\n    </React.Fragment>\r\n  )\r\n}","E:\\Dev\\React\\sidiro\\src\\services\\FetchTimeseriesAPI.service.ts",[],["325","326"],"E:\\Dev\\React\\sidiro\\src\\reducers\\SystemTopologyData.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\SystemTopologyData.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\utilities\\DecodeState.utility.ts",[],"E:\\Dev\\React\\sidiro\\src\\workers\\TimeseriesData.worker.js",[],["327","328"],{"ruleId":"329","replacedBy":"330"},{"ruleId":"331","replacedBy":"332"},{"ruleId":"333","severity":1,"message":"334","line":14,"column":10,"nodeType":"335","messageId":"336","endLine":14,"endColumn":25},{"ruleId":"337","severity":1,"message":"338","line":148,"column":6,"nodeType":"339","endLine":148,"endColumn":8,"suggestions":"340"},{"ruleId":"333","severity":1,"message":"341","line":5,"column":10,"nodeType":"335","messageId":"336","endLine":5,"endColumn":18},{"ruleId":"333","severity":1,"message":"342","line":8,"column":10,"nodeType":"335","messageId":"336","endLine":8,"endColumn":19},{"ruleId":"329","replacedBy":"343"},{"ruleId":"331","replacedBy":"344"},{"ruleId":"329","replacedBy":"345"},{"ruleId":"331","replacedBy":"346"},{"ruleId":"329","replacedBy":"347"},{"ruleId":"331","replacedBy":"348"},{"ruleId":"329","replacedBy":"349"},{"ruleId":"331","replacedBy":"350"},{"ruleId":"333","severity":1,"message":"351","line":5,"column":67,"nodeType":"335","messageId":"336","endLine":5,"endColumn":84},{"ruleId":"333","severity":1,"message":"351","line":5,"column":67,"nodeType":"335","messageId":"336","endLine":5,"endColumn":84},{"ruleId":"333","severity":1,"message":"352","line":2,"column":10,"nodeType":"335","messageId":"336","endLine":2,"endColumn":20},{"ruleId":"333","severity":1,"message":"353","line":3,"column":10,"nodeType":"335","messageId":"336","endLine":3,"endColumn":23},{"ruleId":"329","replacedBy":"354"},{"ruleId":"331","replacedBy":"355"},{"ruleId":"329","replacedBy":"330"},{"ruleId":"331","replacedBy":"332"},"no-native-reassign",["356"],"no-negated-in-lhs",["357"],"@typescript-eslint/no-unused-vars","'fetchTimeseries' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["358"],"'BarChart' is defined but never used.","'LineChart' is defined but never used.",["356"],["357"],["356"],["357"],["356"],["357"],["356"],["357"],"'SiemensAccentBlue' is defined but never used.","'lineLength' is defined but never used.","'PieChartProps' is defined but never used.",["356"],["357"],"no-global-assign","no-unsafe-negation",{"desc":"359","fix":"360"},"Update the dependencies array to be: [dispatch]",{"range":"361","text":"362"},[5618,5620],"[dispatch]"]