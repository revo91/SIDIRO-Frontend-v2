[{"E:\\Dev\\React\\sidiro\\src\\index.tsx":"1","E:\\Dev\\React\\sidiro\\src\\reportWebVitals.ts":"2","E:\\Dev\\React\\sidiro\\src\\App.tsx":"3","E:\\Dev\\React\\sidiro\\src\\components\\Drawer.component.tsx":"4","E:\\Dev\\React\\sidiro\\src\\routes\\Drawer.routes.tsx":"5","E:\\Dev\\React\\sidiro\\src\\components\\Overview.component.tsx":"6","E:\\Dev\\React\\sidiro\\src\\i18n.ts":"7","E:\\Dev\\React\\sidiro\\src\\translations.ts":"8","E:\\Dev\\React\\sidiro\\src\\reducers\\Root.reducer.ts":"9","E:\\Dev\\React\\sidiro\\src\\reducers\\UniversalTabs.reducer.ts":"10","E:\\Dev\\React\\sidiro\\src\\actions\\UniversalTabs.action.ts":"11","E:\\Dev\\React\\sidiro\\src\\components\\UniversalTabs.component.tsx":"12","E:\\Dev\\React\\sidiro\\src\\reducers\\LanguageDialog.reducer.ts":"13","E:\\Dev\\React\\sidiro\\src\\actions\\LanguageDialog.action.ts":"14","E:\\Dev\\React\\sidiro\\src\\components\\LanguageDialog.component.tsx":"15","E:\\Dev\\React\\sidiro\\src\\components\\Powermonitor.component.tsx":"16","E:\\Dev\\React\\sidiro\\src\\components\\LineChart.component.tsx":"17","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog.component.tsx":"18","E:\\Dev\\React\\sidiro\\src\\reducers\\DeviceDataDialog.reducer.ts":"19","E:\\Dev\\React\\sidiro\\src\\actions\\DeviceDataDialog.action.ts":"20","E:\\Dev\\React\\sidiro\\src\\components\\Events.component.tsx":"21","E:\\Dev\\React\\sidiro\\src\\components\\UniversalTable.component.tsx":"22","E:\\Dev\\React\\sidiro\\src\\components\\Elevation.component.tsx":"23","E:\\Dev\\React\\sidiro\\src\\components\\Reports.component.tsx":"24","E:\\Dev\\React\\sidiro\\src\\components\\BarChart.component.tsx":"25","E:\\Dev\\React\\sidiro\\src\\components\\PieChart.component.tsx":"26","E:\\Dev\\React\\sidiro\\src\\reducers\\Backdrop.reducer.ts":"27","E:\\Dev\\React\\sidiro\\src\\actions\\Backdrop.action.ts":"28","E:\\Dev\\React\\sidiro\\src\\components\\Backdrop.component.tsx":"29","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\BreakerDevice.component.tsx":"30","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\CurrentTab.component.tsx":"31","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTab.component.tsx":"32","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\TransformerSVG.component.tsx":"33","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\CircuitBreakerSVG.component.tsx":"34","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\GeneratorSVG.component.tsx":"35","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\CouplingBreakerSVG.component.tsx":"36","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\ParametersTableSVG.component.tsx":"37","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\SectionSVG.component.tsx":"38","E:\\Dev\\React\\sidiro\\src\\utilities\\SiemensColors.utility.ts":"39","E:\\Dev\\React\\sidiro\\src\\utilities\\DeviceTypes.utility.ts":"40","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\GeneratorDevice.component.tsx":"41","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\TransformerDevice.component.tsx":"42","E:\\Dev\\React\\sidiro\\src\\utilities\\BreakerStates.utility.ts":"43","E:\\Dev\\React\\sidiro\\src\\hooks\\useUpdateChartFontColor.hook.ts":"44","E:\\Dev\\React\\sidiro\\src\\hooks\\useUpdateChartDatasets.hook.ts":"45","E:\\Dev\\React\\sidiro\\src\\components\\TableWithSort.component.tsx":"46","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\PanelSVG.component.tsx":"47","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CompartmentSVG.component.tsx":"48","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\TestSVG.component.tsx":"49","E:\\Dev\\React\\sidiro\\src\\mock\\elevation.mock.ts":"50","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3WLSVG.component.tsx":"51","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3VAVerticalSVG.component.tsx":"52","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3VAHorizontalSVG.component.tsx":"53","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NP1VerticalSVG.component.tsx":"54","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NJ6SVG.component.tsx":"55","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NJ4SVG.component.tsx":"56","E:\\Dev\\React\\sidiro\\src\\reducers\\Elevation.reducer.ts":"57","E:\\Dev\\React\\sidiro\\src\\actions\\Elevation.action.ts":"58","E:\\Dev\\React\\sidiro\\src\\reducers\\Overview.reducer.ts":"59","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\PowerTab.component.tsx":"60","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\THDITab.component.tsx":"61","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\VoltageLNTab.component.tsx":"62","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\THDUTab.component.tsx":"63","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\VoltageLLTab.component.tsx":"64"},{"size":509,"mtime":1614582158684,"results":"65","hashOfConfig":"66"},{"size":425,"mtime":1611564277809,"results":"67","hashOfConfig":"66"},{"size":2836,"mtime":1614594077597,"results":"68","hashOfConfig":"66"},{"size":8953,"mtime":1614594273911,"results":"69","hashOfConfig":"66"},{"size":740,"mtime":1612870262805,"results":"70","hashOfConfig":"66"},{"size":12780,"mtime":1616673049910,"results":"71","hashOfConfig":"66"},{"size":2045,"mtime":1612268307219,"results":"72","hashOfConfig":"66"},{"size":5033,"mtime":1616673061760,"results":"73","hashOfConfig":"66"},{"size":739,"mtime":1615984380993,"results":"74","hashOfConfig":"66"},{"size":517,"mtime":1612947186584,"results":"75","hashOfConfig":"66"},{"size":222,"mtime":1612272726129,"results":"76","hashOfConfig":"66"},{"size":2713,"mtime":1615548166446,"results":"77","hashOfConfig":"66"},{"size":457,"mtime":1612869056672,"results":"78","hashOfConfig":"66"},{"size":169,"mtime":1612340177186,"results":"79","hashOfConfig":"66"},{"size":2201,"mtime":1616656214740,"results":"80","hashOfConfig":"66"},{"size":614,"mtime":1614159398121,"results":"81","hashOfConfig":"66"},{"size":3302,"mtime":1616076184107,"results":"82","hashOfConfig":"66"},{"size":3100,"mtime":1616072546012,"results":"83","hashOfConfig":"66"},{"size":802,"mtime":1616065131259,"results":"84","hashOfConfig":"66"},{"size":410,"mtime":1616064174462,"results":"85","hashOfConfig":"66"},{"size":3788,"mtime":1616148011270,"results":"86","hashOfConfig":"66"},{"size":1522,"mtime":1614328256857,"results":"87","hashOfConfig":"66"},{"size":8839,"mtime":1616083285067,"results":"88","hashOfConfig":"66"},{"size":27921,"mtime":1616425112312,"results":"89","hashOfConfig":"66"},{"size":2211,"mtime":1616157645066,"results":"90","hashOfConfig":"66"},{"size":2005,"mtime":1616157526084,"results":"91","hashOfConfig":"66"},{"size":419,"mtime":1613052032862,"results":"92","hashOfConfig":"66"},{"size":140,"mtime":1613051432655,"results":"93","hashOfConfig":"66"},{"size":730,"mtime":1613051990939,"results":"94","hashOfConfig":"66"},{"size":908,"mtime":1616071365278,"results":"95","hashOfConfig":"66"},{"size":3537,"mtime":1616080701175,"results":"96","hashOfConfig":"66"},{"size":10179,"mtime":1616673378577,"results":"97","hashOfConfig":"66"},{"size":2762,"mtime":1616065126991,"results":"98","hashOfConfig":"66"},{"size":8838,"mtime":1616670760368,"results":"99","hashOfConfig":"66"},{"size":2200,"mtime":1616065232056,"results":"100","hashOfConfig":"66"},{"size":6327,"mtime":1616656698024,"results":"101","hashOfConfig":"66"},{"size":2704,"mtime":1616065128215,"results":"102","hashOfConfig":"66"},{"size":1572,"mtime":1616665239650,"results":"103","hashOfConfig":"66"},{"size":3101,"mtime":1614583804653,"results":"104","hashOfConfig":"66"},{"size":125,"mtime":1614085479558,"results":"105","hashOfConfig":"66"},{"size":1119,"mtime":1614085317035,"results":"106","hashOfConfig":"66"},{"size":1379,"mtime":1616073129400,"results":"107","hashOfConfig":"66"},{"size":69,"mtime":1614156488357,"results":"108","hashOfConfig":"66"},{"size":1433,"mtime":1614607096669,"results":"109","hashOfConfig":"66"},{"size":864,"mtime":1614676311073,"results":"110","hashOfConfig":"66"},{"size":7580,"mtime":1616068315107,"results":"111","hashOfConfig":"66"},{"size":2505,"mtime":1616061717494,"results":"112","hashOfConfig":"66"},{"size":1761,"mtime":1615804881756,"results":"113","hashOfConfig":"66"},{"size":4359,"mtime":1615296134508,"results":"114","hashOfConfig":"66"},{"size":3229,"mtime":1615472604478,"results":"115","hashOfConfig":"66"},{"size":10588,"mtime":1615461167960,"results":"116","hashOfConfig":"66"},{"size":4805,"mtime":1615551015772,"results":"117","hashOfConfig":"66"},{"size":1621,"mtime":1615452447087,"results":"118","hashOfConfig":"66"},{"size":3250,"mtime":1615461224066,"results":"119","hashOfConfig":"66"},{"size":4376,"mtime":1615465096998,"results":"120","hashOfConfig":"66"},{"size":2102,"mtime":1615471322917,"results":"121","hashOfConfig":"66"},{"size":17029,"mtime":1616062957496,"results":"122","hashOfConfig":"66"},{"size":47,"mtime":1615535123127,"results":"123","hashOfConfig":"66"},{"size":10324,"mtime":1616668217997,"results":"124","hashOfConfig":"66"},{"size":4412,"mtime":1616071152468,"results":"125","hashOfConfig":"66"},{"size":3540,"mtime":1616074746904,"results":"126","hashOfConfig":"66"},{"size":3658,"mtime":1616073841466,"results":"127","hashOfConfig":"66"},{"size":3758,"mtime":1616073607458,"results":"128","hashOfConfig":"66"},{"size":3661,"mtime":1616076255506,"results":"129","hashOfConfig":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},"vdwtrg",{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"132"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"132"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"132"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"132"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},"E:\\Dev\\React\\sidiro\\src\\index.tsx",[],["265","266"],"E:\\Dev\\React\\sidiro\\src\\reportWebVitals.ts",[],"E:\\Dev\\React\\sidiro\\src\\App.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Drawer.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\routes\\Drawer.routes.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\i18n.ts",[],"E:\\Dev\\React\\sidiro\\src\\translations.ts",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\Root.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\UniversalTabs.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\UniversalTabs.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\UniversalTabs.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\LanguageDialog.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\LanguageDialog.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\LanguageDialog.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Powermonitor.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\LineChart.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog.component.tsx",["267"],"import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../reducers/Root.reducer';\r\nimport { setDeviceDataDialogOpen } from '../actions/DeviceDataDialog.action';\r\nimport { BreakerDevice } from './DeviceDataDialog/BreakerDevice.component';\r\nimport { GeneratorDevice } from './DeviceDataDialog/GeneratorDevice.component';\r\nimport { TransformerDevice } from './DeviceDataDialog/TransformerDevice.component';\r\nimport { DeviceTypes } from '../utilities/DeviceTypes.utility';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    appBar: {\r\n      position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n  }),\r\n);\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement },\r\n  ref: React.Ref<unknown>,\r\n) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport const DeviceDataDialog: React.FC = () => {\r\n  const classes = useStyles();\r\n  const open = useSelector((state: RootState) => state.deviceDataDialog.open);\r\n  const deviceName = useSelector((state: RootState) => state.deviceDataDialog.deviceName);\r\n  const deviceType = useSelector((state: RootState) => state.deviceDataDialog.deviceType);\r\n  const breakerName = useSelector((state: RootState) => state.deviceDataDialog.breakerName);\r\n  const dispatch = useDispatch();\r\n\r\n  const showTabsAccordingToDeviceType = () => {\r\n    switch (deviceType) {\r\n      case DeviceTypes.circuitBreaker:\r\n        return <BreakerDevice />\r\n      case DeviceTypes.generator:\r\n      case DeviceTypes.transformer:\r\n        return <TransformerDevice />\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog fullScreen open={open} onClose={() => dispatch(setDeviceDataDialogOpen({\r\n      open: false,\r\n      deviceName: deviceName,\r\n      deviceType: deviceType,\r\n      breakerName: breakerName\r\n    }))} TransitionComponent={Transition}>\r\n      <AppBar className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" onClick={() => dispatch(setDeviceDataDialogOpen({\r\n            open: false,\r\n            deviceName: deviceName,\r\n            deviceType: deviceType,\r\n            breakerName: breakerName\r\n          }))} aria-label=\"close\">\r\n            <CloseIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            {deviceName}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {showTabsAccordingToDeviceType()}\r\n    </Dialog>\r\n  );\r\n}","E:\\Dev\\React\\sidiro\\src\\reducers\\DeviceDataDialog.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\DeviceDataDialog.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\Events.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\UniversalTable.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Reports.component.tsx",["268","269","270","271"],"import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { BarChart } from './BarChart.component';\r\nimport { PieChart } from './PieChart.component';\r\nimport { SiemensColors, SiemensAccentBlue, SiemensAccentRed, SiemensAccentYellow } from '../utilities/SiemensColors.utility';\r\nimport { SiemensColorsAlpha } from '../utilities/SiemensColors.utility';\r\nimport { LineChart } from './LineChart.component';\r\nimport { UniversalTabs } from './UniversalTabs.component';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport { UniversalTable } from './UniversalTable.component';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { forEachChild } from 'typescript';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    button: {\r\n      margin: '0px 10px'\r\n    },\r\n    select: {\r\n      width: '100%'\r\n    }\r\n  }),\r\n);\r\n\r\nexport const Reports = () => {\r\n  const { t } = useTranslation();\r\n  const [sampleData1, setSampleData1] = React.useState<Array<number>>([2478, 5267, 734, 784])\r\n  const [productionTotal, setProductionTotal] = React.useState<Array<number>>([100, 100, 100, 100, 100, 100])\r\n  const [line37, setLine37] = React.useState<Array<number>>([100, 100, 100, 100, 100])\r\n  const [sampleTimeSeriesData, setSampleTimeSeriesData] = React.useState<Array<{ t: number | Date, y: number }>>([{ t: new Date(2021, 1, 1), y: 10 }, { t: new Date(2021, 1, 5), y: 10 }, { t: new Date(2021, 1, 9), y: 10 }])\r\n  const [dateFrom, changeDateFrom] = React.useState<Date | null>(new Date(new Date().setMonth(new Date().getMonth() - 1)));\r\n  const classes = useStyles()\r\n  const [energyType, setEnergyType] = React.useState('0');\r\n\r\n  const handleEnergyType = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setEnergyType(event.target.value as string);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    let interval = setInterval(() => {\r\n      setSampleData1(sampleData1.map(() => Math.round(Math.random() * 1000) / 10))\r\n      setProductionTotal(productionTotal.map(() => Math.round(Math.random() * 1000) / 20))\r\n      setLine37(line37.map(() => Math.round(Math.random() * 1000) / 40))\r\n\r\n\r\n      setSampleTimeSeriesData(sampleTimeSeriesData.map((data) => {\r\n        return {\r\n          t: data.t,\r\n          y: Math.round(Math.random() * 100) / 100\r\n        }\r\n      }))\r\n    }, 10000)\r\n    return () => clearInterval(interval)\r\n  }, [sampleData1, sampleTimeSeriesData, productionTotal, line37])\r\n\r\n  const energyConsumptionTab = (\r\n    <Grid container spacing={2} >\r\n      <Grid item xs={12} sm={9}>\r\n        <DatePicker\r\n          cancelLabel={t('datePicker.cancelButton')}\r\n          autoOk\r\n          label={'Wybierz miesiąc'}\r\n          value={dateFrom}\r\n          onChange={changeDateFrom}\r\n          fullWidth\r\n          views={['month']}\r\n          format=\"MM/yyyy\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} sm={3}>\r\n        <Button className={classes.button}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Eksport PDF\r\n      </Button>\r\n        <Button className={classes.button}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Eksport CSV\r\n      </Button>\r\n      </Grid>\r\n      <Grid item xs={12} style={{ marginBottom: '0px', marginTop: '30px' }}>\r\n        <Typography gutterBottom variant=\"h5\">Całościowe zużycie energii czynnej</Typography>\r\n      </Grid>\r\n      <Grid item xs={12} md={6}>\r\n        <PieChart\r\n          chartTitle=\"\"\r\n          data={{\r\n            labels: [\"HVPP-4\", \"HVPP-2\", \"HVPP-3\", \"Samochody elektryczne\"],\r\n            datasets: [\r\n              {\r\n                label: \"\",\r\n                backgroundColor: [SiemensColors.tealLight, SiemensColors.redDark, SiemensColors.redLight, SiemensColors.blueDark, SiemensColors.yellowDark],\r\n                data: sampleData1\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n\r\n      </Grid>\r\n      <Grid item xs={12} md={6}>\r\n        <UniversalTable\r\n          columns={['Nazwa grupy', 'Zużycie energii czynnej']}\r\n          rows={[['Produkcja', `${sampleData1[0]} kWh`], ['Magazyny', `${sampleData1[1]} kWh`], ['Biura', `${sampleData1[2]} kWh`], ['Ładowanie samochodów', `${sampleData1[3]} kWh`], ['Zużycie całkowite', `${sampleData1[0] + sampleData1[1] + sampleData1[2] + sampleData1[3]} kWh`]]}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Divider />\r\n      </Grid>\r\n      {/* NEXTLEVEL */}\r\n      <Grid item xs={12} style={{ marginBottom: '0px', marginTop: '30px' }}>\r\n        <Typography gutterBottom variant=\"h5\">Production total</Typography>\r\n      </Grid>\r\n      <Grid item xs={12} md={6}>\r\n        <PieChart\r\n          chartTitle=\"\"\r\n          data={{\r\n            labels: [\"Linia produkcyjna L34\", \"Linia produkcyjna L35\", \"Linia produkcyjna L36\", \"Linia produkcyjna L37\", \"Stacja budynkowa dla linii produkcyjnych\", \"Ogrzewanie, chłodzenie, sprężone powietrze\"],\r\n            datasets: [\r\n              {\r\n                label: \"\",\r\n                backgroundColor: [SiemensAccentBlue.dark3, SiemensAccentBlue.light1, SiemensAccentRed.dark3, SiemensAccentRed.light1, SiemensAccentYellow.dark3, SiemensAccentYellow.light1],\r\n                data: productionTotal\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} md={6}>\r\n        <UniversalTable\r\n          columns={['Nazwa grupy', 'Zużycie energii czynnej']}\r\n          rows={[['Linia produkcyjna L34', `${productionTotal[0]} kWh`], ['Linia produkcyjna L35', `${productionTotal[1]} kWh`], ['Linia produkcyjna L36', `${productionTotal[2]} kWh`], ['Linia produkcyjna L37', `${productionTotal[3]} kWh`],\r\n          ['Stacja budynkowa dla linii produkcyjnych', `${productionTotal[4]} kWh`], ['Ogrzewanie, chłodzenie, sprężone powietrze', `${productionTotal[5]} kWh`], ['Zużycie całkowite', `${productionTotal[0] + productionTotal[1] + productionTotal[2] + productionTotal[3] + productionTotal[4] + productionTotal[5]} kWh`]]}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Divider />\r\n      </Grid>\r\n\r\n      {/* NEXTLEVEL */}\r\n      <Grid item xs={12} style={{ marginBottom: '0px', marginTop: '30px' }}>\r\n        <Typography gutterBottom variant=\"h5\">Line 37</Typography>\r\n      </Grid>\r\n      <Grid item xs={12} md={6}>\r\n        <PieChart\r\n          chartTitle=\"\"\r\n          data={{\r\n            labels: [\"Formowanie\", \"Nawijanie\", \"Mieszanie\", \"Blender RB37\", \"Mikser ZTM37\"],\r\n            datasets: [\r\n              {\r\n                label: \"\",\r\n                backgroundColor: [SiemensAccentBlue.dark3, SiemensAccentBlue.light1, SiemensAccentRed.dark3, SiemensAccentRed.light1, SiemensAccentYellow.dark3],\r\n                data: line37\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} md={6}>\r\n        <UniversalTable\r\n          columns={['Nazwa grupy', 'Zużycie energii czynnej']}\r\n          rows={[['Formowanie', `${line37[0]} kWh`], ['Nawijanie', `${line37[1]} kWh`], ['Mieszanie', `${line37[2]} kWh`], ['Blender RB37', `${line37[3]} kWh`],\r\n          ['Mikser ZTM37', `${line37[4]} kWh`], ['Zużycie całkowite', `${line37[0] + line37[1] + line37[2] + line37[3] + line37[4]} kWh`]]}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Divider />\r\n      </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      {/* <BarChart\r\n          chartTitle=\"barchart\"\r\n          data={{\r\n            labels: [\"Africa\", \"Asia\", \"Europe\", \"Latin America\", \"North Americaa\"],\r\n            datasets: [\r\n              {\r\n                label: \"Population (millions)\",\r\n                backgroundColor: [SiemensColorsAlpha.tealLightAlpha, SiemensColorsAlpha.redDarkAlpha, SiemensColorsAlpha.redLightAlpha, SiemensColorsAlpha.blueDarkAlpha, SiemensColorsAlpha.yellowDarkAlpha],\r\n                borderColor: [SiemensColors.tealLight, SiemensColors.redDark, SiemensColors.redLight, SiemensColors.blueDark, SiemensColors.yellowDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n                \r\n              }\r\n            ]\r\n          }} \r\n          /> */}\r\n\r\n      <Grid item xs={12}>\r\n        {/* <PieChart\r\n          chartTitle=\"something\"\r\n          data={{\r\n            labels: [\"Africa\", \"Asia\", \"Europe\", \"Latin America\", \"North Americaa\"],\r\n            datasets: [\r\n              {\r\n                label: \"Population (millions)\",\r\n                backgroundColor: [SiemensColors.tealLight, SiemensColors.redDark, SiemensColors.redLight, SiemensColors.blueDark, SiemensColors.yellowDark],\r\n                data: sampleData1\r\n              }\r\n            ]\r\n          }} \r\n          /> */}\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        {/* <LineChart\r\n          data={{\r\n            datasets: [\r\n              {\r\n                label: \"dataset1\",\r\n                backgroundColor: SiemensColors.tealLight,\r\n                borderColor: SiemensColors.tealLight,\r\n                fill: false,\r\n                lineTension: 0,\r\n                data: sampleTimeSeriesData\r\n              },\r\n              {\r\n                label: \"dataset2\",\r\n                backgroundColor: SiemensColors.yellowDark,\r\n                borderColor: SiemensColors.yellowDark,\r\n                fill: false,\r\n                lineTension: 0,\r\n                data: [{ t: new Date(2021, 1, 1), y: 5 }, { t: new Date(2021, 1, 5), y: 7 }, { t: new Date(2021, 1, 9), y: 6 }]\r\n              }\r\n            ]\r\n          }} \r\n          /> */}\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n\r\n  const usageProfileTab = (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={12} sm={6}>\r\n        <DatePicker\r\n          cancelLabel={t('datePicker.cancelButton')}\r\n          autoOk\r\n          label={'Wybierz miesiąc'}\r\n          value={dateFrom}\r\n          onChange={changeDateFrom}\r\n          fullWidth\r\n          views={['month']}\r\n          format=\"MM/yyyy\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} sm={3}>\r\n        <FormControl className={classes.select}>\r\n          <InputLabel id=\"breaker-select-label\">Energia</InputLabel>\r\n          <Select\r\n            fullWidth\r\n            labelId=\"breaker-select-label\"\r\n            id=\"breaker-select\"\r\n            value={energyType}\r\n            onChange={handleEnergyType}\r\n          >\r\n            <MenuItem value={0}>Energia czynna</MenuItem>\r\n            <MenuItem value={10}>Energia bierna indukcyjna</MenuItem>\r\n            <MenuItem value={20}>Energia bierna pojemnościowa</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={12} sm={3}>\r\n        <Button className={classes.button}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Eksport PDF\r\n      </Button>\r\n        <Button className={classes.button}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Eksport CSV\r\n      </Button>\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        <FormControl className={classes.select}>\r\n          <InputLabel id=\"breaker-select-label\">Wybierz rozdzielnicę</InputLabel>\r\n          <Select\r\n            fullWidth\r\n            labelId=\"breaker-select-label\"\r\n            id=\"breaker-select\"\r\n            value={energyType}\r\n            onChange={handleEnergyType}\r\n          >\r\n            <MenuItem value={0}>HVPP-1</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        <FormControl className={classes.select}>\r\n          <InputLabel id=\"breaker-select-label\">Wybierz odbiór</InputLabel>\r\n          <Select\r\n            fullWidth\r\n            labelId=\"breaker-select-label\"\r\n            id=\"breaker-select\"\r\n            value={energyType}\r\n            onChange={handleEnergyType}\r\n          >\r\n            <MenuItem value={0}>QT01</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <BarChart\r\n          chartTitle=\"\"\r\n          data={{\r\n            labels: [\"2021-01-01\", \"2021-01-02\", \"2021-01-03\", \"2021-01-04\", \"2021-01-05\", \"2021-01-06\", \"2021-01-07\", \"2021-01-08\", \"2021-01-09\", \"2021-01-10\", \"2021-01-11\", \"2021-01-12\", \"2021-01-13\", \"2021-01-14\", \"2021-01-15\", \"2021-01-16\",\r\n              \"2021-01-16\", \"2021-01-17\", \"2021-01-18\", \"2021-01-19\", \"2021-01-20\", \"2021-01-21\", \"2021-01-22\", \"2021-01-23\", \"2021-01-24\", \"2021-01-25\", \"2021-01-26\", \"2021-01-27\", \"2021-01-28\", \"2021-01-29\", \"2021-01-30\"],\r\n            datasets: [\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.redDark, SiemensColors.redDark, SiemensColors.redDark, SiemensColors.redDark, SiemensColors.redDark],\r\n                borderColor: [SiemensColors.redDark, SiemensColors.redDark, SiemensColors.redDark, SiemensColors.redDark, SiemensColors.redDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.tealLight, SiemensColors.tealLight, SiemensColors.tealLight, SiemensColors.tealLight, SiemensColors.tealLight],\r\n                borderColor: [SiemensColors.tealLight, SiemensColors.tealLight, SiemensColors.tealLight, SiemensColors.tealLight, SiemensColors.tealLight],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              }\r\n              , {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              },\r\n              {\r\n                label: \"Energia czynna [kWh]\",\r\n                backgroundColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderColor: [SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark, SiemensColors.blueDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} style={{ marginBottom: '0px', marginTop: '30px' }}>\r\n        <Typography gutterBottom variant=\"h5\">Całościowa energia czynna</Typography>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12}>\r\n          <Typography variant='h2' gutterBottom>{t('reportsPage.title')}</Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <UniversalTabs\r\n        name='Reports'\r\n        tabs={[\r\n          {\r\n            label: 'Miesięczne zużycie energii',\r\n            content: energyConsumptionTab\r\n          },\r\n          {\r\n            label: 'Profil zużycia energii',\r\n            content: usageProfileTab\r\n          },\r\n          {\r\n            label: 'Moce 15-minutowe',\r\n            content: <p>Power demand tab content</p>\r\n          },\r\n          {\r\n            label: 'Parametry zasilania',\r\n            content: <p>Supply parameters tab content</p>\r\n          },\r\n          {\r\n            label: 'Parametry odbiorów',\r\n            content: <p>Infeeds parameters tab content</p>\r\n          }\r\n        ]}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}","E:\\Dev\\React\\sidiro\\src\\components\\BarChart.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\PieChart.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\Backdrop.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\Backdrop.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\Backdrop.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\BreakerDevice.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\CurrentTab.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTab.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\TransformerSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\CircuitBreakerSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\GeneratorSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\CouplingBreakerSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\ParametersTableSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\SectionSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\utilities\\SiemensColors.utility.ts",[],"E:\\Dev\\React\\sidiro\\src\\utilities\\DeviceTypes.utility.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\GeneratorDevice.component.tsx",[],["272","273"],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\TransformerDevice.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\utilities\\BreakerStates.utility.ts",[],"E:\\Dev\\React\\sidiro\\src\\hooks\\useUpdateChartFontColor.hook.ts",[],"E:\\Dev\\React\\sidiro\\src\\hooks\\useUpdateChartDatasets.hook.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\TableWithSort.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\PanelSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CompartmentSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\TestSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\mock\\elevation.mock.ts",[],["274","275"],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3WLSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3VAVerticalSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3VAHorizontalSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NP1VerticalSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NJ6SVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NJ4SVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\Elevation.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\Elevation.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\Overview.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\PowerTab.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\THDITab.component.tsx",["276"],"import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { SiemensAccentTeal, SiemensAccentGreen, SiemensAccentRed, SiemensAccentBlue } from '../../utilities/SiemensColors.utility';\r\nimport { DatePicker, TimePicker } from \"@material-ui/pickers\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    timePickersContainer: {\r\n      marginTop: theme.spacing(2),\r\n      paddingTop: theme.spacing(2),\r\n      paddingBottom: theme.spacing(2),\r\n    }\r\n  }),\r\n);\r\n\r\nexport const THDITab = () => {\r\n  const [dateFrom, changeDateFrom] = React.useState<Date | null>(new Date());\r\n  const classes = useStyles();\r\n  const { t } = useTranslation();\r\n  const [l1, setL1] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n  const [l2, setL2] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n  const [l3, setL3] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n\r\n  const generateSampleData = () => {\r\n    let arr1 = []\r\n    let arr2 = []\r\n    let arr3 = []\r\n    for (let i = 0; i < 25; i++) {\r\n      arr1.push({\r\n        t: new Date(2021, 2, i+1, 1),\r\n        y: 30+ Math.random()*10\r\n      })\r\n      arr2.push({\r\n        t: new Date(2021, 2, i+1, 1),\r\n        y: 30+ Math.random()*10\r\n      })\r\n      arr3.push({\r\n        t: new Date(2021, 2, i+1, 1),\r\n        y: 4\r\n      })\r\n    }\r\n    setL1(arr1)\r\n    setL2(arr2)\r\n    setL3(arr3)\r\n  }\r\n\r\n  React.useEffect(()=>{\r\n    generateSampleData()\r\n  },[])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <LineChart\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  label: \"THD I L1 [%]\",\r\n                  backgroundColor: SiemensAccentTeal.light1,\r\n                  borderColor: SiemensAccentTeal.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l1\r\n                },\r\n                {\r\n                  label: \"THD I L2 [%]\",\r\n                  backgroundColor: SiemensAccentRed.light1,\r\n                  borderColor: SiemensAccentRed.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l2\r\n                },\r\n                {\r\n                  label: \"THD I L3 [%]\",\r\n                  backgroundColor: SiemensAccentGreen.light1,\r\n                  borderColor: SiemensAccentGreen.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l3\r\n                }\r\n              ]\r\n            }} />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={2} className={classes.timePickersContainer}>\r\n        <Grid item xs={12} md={6}>\r\n          <DatePicker\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={changeDateFrom}\r\n            fullWidth\r\n            disableFuture\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TimePicker\r\n            ampm={false}\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={changeDateFrom}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\VoltageLNTab.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\THDUTab.component.tsx",["277"],"import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { SiemensAccentTeal, SiemensAccentGreen, SiemensAccentRed, SiemensAccentBlue } from '../../utilities/SiemensColors.utility';\r\nimport { DatePicker, TimePicker } from \"@material-ui/pickers\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    timePickersContainer: {\r\n      marginTop: theme.spacing(2),\r\n      paddingTop: theme.spacing(2),\r\n      paddingBottom: theme.spacing(2),\r\n    }\r\n  }),\r\n);\r\n\r\nexport const THDUTab = () => {\r\n  const [dateFrom, changeDateFrom] = React.useState<Date | null>(new Date());\r\n  const classes = useStyles();\r\n  const { t } = useTranslation();\r\n  const [l1, setL1] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n  const [l2, setL2] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n  const [l3, setL3] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n\r\n  const generateSampleData = () => {\r\n    console.log(parseInt((new Date('2021.01.01').getTime() / 1000).toFixed(0)))\r\n    let arr1 = []\r\n    let arr2 = []\r\n    let arr3 = []\r\n    for (let i = 0; i <= 120; i++) {\r\n      arr1.push({\r\n        t: parseInt((new Date('2021.01.01').getTime()).toFixed(0)) + i*1000,\r\n        y: 1+ Math.random()*10\r\n      })\r\n      arr2.push({\r\n        t: parseInt((new Date('2021.01.01').getTime()).toFixed(0)) + i*1000, //minutes\r\n        y: 1+ Math.random()*10\r\n      })\r\n      arr3.push({\r\n        t: parseInt((new Date('2021.01.01').getTime()).toFixed(0)) + i*1000, //minutes\r\n        y: 4\r\n      })\r\n    }\r\n    setL1(arr1)\r\n    setL2(arr2)\r\n    setL3(arr3)\r\n  }\r\n\r\n  React.useEffect(()=>{\r\n    generateSampleData()\r\n  },[])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <LineChart\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  label: \"THD U L1 [%]\",\r\n                  backgroundColor: SiemensAccentTeal.light1,\r\n                  borderColor: SiemensAccentTeal.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l1\r\n                },\r\n                {\r\n                  label: \"THD U L2 [%]\",\r\n                  backgroundColor: SiemensAccentRed.light1,\r\n                  borderColor: SiemensAccentRed.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l2\r\n                },\r\n                {\r\n                  label: \"THD U L3 [%]\",\r\n                  backgroundColor: SiemensAccentGreen.light1,\r\n                  borderColor: SiemensAccentGreen.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l3\r\n                }\r\n              ]\r\n            }} />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={2} className={classes.timePickersContainer}>\r\n        <Grid item xs={12} md={6}>\r\n          <DatePicker\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={changeDateFrom}\r\n            fullWidth\r\n            disableFuture\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TimePicker\r\n            ampm={false}\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={changeDateFrom}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\VoltageLLTab.component.tsx",[],{"ruleId":"278","replacedBy":"279"},{"ruleId":"280","replacedBy":"281"},{"ruleId":"282","severity":1,"message":"283","line":15,"column":10,"nodeType":"284","messageId":"285","endLine":15,"endColumn":25},{"ruleId":"282","severity":1,"message":"286","line":8,"column":10,"nodeType":"284","messageId":"285","endLine":8,"endColumn":28},{"ruleId":"282","severity":1,"message":"287","line":9,"column":10,"nodeType":"284","messageId":"285","endLine":9,"endColumn":19},{"ruleId":"282","severity":1,"message":"288","line":12,"column":8,"nodeType":"284","messageId":"285","endLine":12,"endColumn":22},{"ruleId":"282","severity":1,"message":"289","line":21,"column":10,"nodeType":"284","messageId":"285","endLine":21,"endColumn":22},{"ruleId":"278","replacedBy":"290"},{"ruleId":"280","replacedBy":"291"},{"ruleId":"278","replacedBy":"292"},{"ruleId":"280","replacedBy":"293"},{"ruleId":"282","severity":1,"message":"294","line":5,"column":67,"nodeType":"284","messageId":"285","endLine":5,"endColumn":84},{"ruleId":"282","severity":1,"message":"294","line":5,"column":67,"nodeType":"284","messageId":"285","endLine":5,"endColumn":84},"no-native-reassign",["295"],"no-negated-in-lhs",["296"],"@typescript-eslint/no-unused-vars","'GeneratorDevice' is defined but never used.","Identifier","unusedVar","'SiemensColorsAlpha' is defined but never used.","'LineChart' is defined but never used.","'FormHelperText' is defined but never used.","'forEachChild' is defined but never used.",["295"],["296"],["295"],["296"],"'SiemensAccentBlue' is defined but never used.","no-global-assign","no-unsafe-negation"]