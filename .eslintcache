[{"E:\\Dev\\React\\sidiro\\src\\index.tsx":"1","E:\\Dev\\React\\sidiro\\src\\reportWebVitals.ts":"2","E:\\Dev\\React\\sidiro\\src\\App.tsx":"3","E:\\Dev\\React\\sidiro\\src\\components\\Drawer.component.tsx":"4","E:\\Dev\\React\\sidiro\\src\\routes\\Drawer.routes.tsx":"5","E:\\Dev\\React\\sidiro\\src\\components\\Overview.component.tsx":"6","E:\\Dev\\React\\sidiro\\src\\i18n.ts":"7","E:\\Dev\\React\\sidiro\\src\\translations.ts":"8","E:\\Dev\\React\\sidiro\\src\\reducers\\Root.reducer.ts":"9","E:\\Dev\\React\\sidiro\\src\\reducers\\UniversalTabs.reducer.ts":"10","E:\\Dev\\React\\sidiro\\src\\actions\\UniversalTabs.action.ts":"11","E:\\Dev\\React\\sidiro\\src\\components\\UniversalTabs.component.tsx":"12","E:\\Dev\\React\\sidiro\\src\\reducers\\LanguageDialog.reducer.ts":"13","E:\\Dev\\React\\sidiro\\src\\actions\\LanguageDialog.action.ts":"14","E:\\Dev\\React\\sidiro\\src\\components\\LanguageDialog.component.tsx":"15","E:\\Dev\\React\\sidiro\\src\\components\\Powermonitor.component.tsx":"16","E:\\Dev\\React\\sidiro\\src\\components\\LineChart.component.tsx":"17","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog.component.tsx":"18","E:\\Dev\\React\\sidiro\\src\\reducers\\DeviceDataDialog.reducer.ts":"19","E:\\Dev\\React\\sidiro\\src\\actions\\DeviceDataDialog.action.ts":"20","E:\\Dev\\React\\sidiro\\src\\components\\Events.component.tsx":"21","E:\\Dev\\React\\sidiro\\src\\components\\UniversalTable.component.tsx":"22","E:\\Dev\\React\\sidiro\\src\\components\\Elevation.component.tsx":"23","E:\\Dev\\React\\sidiro\\src\\components\\Reports.component.tsx":"24","E:\\Dev\\React\\sidiro\\src\\components\\BarChart.component.tsx":"25","E:\\Dev\\React\\sidiro\\src\\components\\PieChart.component.tsx":"26","E:\\Dev\\React\\sidiro\\src\\reducers\\Backdrop.reducer.ts":"27","E:\\Dev\\React\\sidiro\\src\\actions\\Backdrop.action.ts":"28","E:\\Dev\\React\\sidiro\\src\\components\\Backdrop.component.tsx":"29","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\BreakerDevice.component.tsx":"30","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\CurrentTab.component.tsx":"31","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTab.component.tsx":"32","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\TransformerSVG.component.tsx":"33","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\CircuitBreakerSVG.component.tsx":"34","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\GeneratorSVG.component.tsx":"35","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\CouplingBreakerSVG.component.tsx":"36","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\ParametersTableSVG.component.tsx":"37","E:\\Dev\\React\\sidiro\\src\\components\\Overview\\SectionSVG.component.tsx":"38","E:\\Dev\\React\\sidiro\\src\\utilities\\SiemensColors.utility.ts":"39","E:\\Dev\\React\\sidiro\\src\\utilities\\DeviceTypes.utility.ts":"40","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\GeneratorDevice.component.tsx":"41","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\TransformerDevice.component.tsx":"42","E:\\Dev\\React\\sidiro\\src\\utilities\\BreakerStates.utility.ts":"43","E:\\Dev\\React\\sidiro\\src\\hooks\\useUpdateChartFontColor.hook.ts":"44","E:\\Dev\\React\\sidiro\\src\\hooks\\useUpdateChartDatasets.hook.ts":"45","E:\\Dev\\React\\sidiro\\src\\components\\TableWithSort.component.tsx":"46","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\PanelSVG.component.tsx":"47","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CompartmentSVG.component.tsx":"48","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\TestSVG.component.tsx":"49","E:\\Dev\\React\\sidiro\\src\\mock\\elevation.mock.ts":"50","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3WLSVG.component.tsx":"51","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3VAVerticalSVG.component.tsx":"52","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3VAHorizontalSVG.component.tsx":"53","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NP1VerticalSVG.component.tsx":"54","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NJ6SVG.component.tsx":"55","E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NJ4SVG.component.tsx":"56","E:\\Dev\\React\\sidiro\\src\\reducers\\Elevation.reducer.ts":"57","E:\\Dev\\React\\sidiro\\src\\actions\\Elevation.action.ts":"58","E:\\Dev\\React\\sidiro\\src\\reducers\\Overview.reducer.ts":"59","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\PowerTab.component.tsx":"60","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\THDITab.component.tsx":"61","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\VoltageLNTab.component.tsx":"62","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\THDUTab.component.tsx":"63","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\VoltageLLTab.component.tsx":"64","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTabCircuitBreakerSVG.component.tsx":"65","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTabTransformerSVG.component.tsx":"66","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTabGeneratorSVG.component.tsx":"67","E:\\Dev\\React\\sidiro\\src\\components\\StackedBarChart.component.tsx":"68","E:\\Dev\\React\\sidiro\\src\\services\\FetchTimeseriesAPI.service.ts":"69","E:\\Dev\\React\\sidiro\\src\\reducers\\SystemTopologyData.reducer.ts":"70","E:\\Dev\\React\\sidiro\\src\\actions\\SystemTopologyData.action.ts":"71"},{"size":509,"mtime":1614582158684,"results":"72","hashOfConfig":"73"},{"size":425,"mtime":1611564277809,"results":"74","hashOfConfig":"73"},{"size":2836,"mtime":1614594077597,"results":"75","hashOfConfig":"73"},{"size":8953,"mtime":1614594273911,"results":"76","hashOfConfig":"73"},{"size":740,"mtime":1612870262805,"results":"77","hashOfConfig":"73"},{"size":18189,"mtime":1617701498784,"results":"78","hashOfConfig":"73"},{"size":2045,"mtime":1612268307219,"results":"79","hashOfConfig":"73"},{"size":5230,"mtime":1616760014519,"results":"80","hashOfConfig":"73"},{"size":850,"mtime":1617020100117,"results":"81","hashOfConfig":"73"},{"size":517,"mtime":1612947186584,"results":"82","hashOfConfig":"73"},{"size":222,"mtime":1612272726129,"results":"83","hashOfConfig":"73"},{"size":2713,"mtime":1615548166446,"results":"84","hashOfConfig":"73"},{"size":457,"mtime":1612869056672,"results":"85","hashOfConfig":"73"},{"size":169,"mtime":1612340177186,"results":"86","hashOfConfig":"73"},{"size":2201,"mtime":1616656214740,"results":"87","hashOfConfig":"73"},{"size":614,"mtime":1614159398121,"results":"88","hashOfConfig":"73"},{"size":3302,"mtime":1616076184107,"results":"89","hashOfConfig":"73"},{"size":3468,"mtime":1616760027978,"results":"90","hashOfConfig":"73"},{"size":888,"mtime":1616743795467,"results":"91","hashOfConfig":"73"},{"size":448,"mtime":1616743868084,"results":"92","hashOfConfig":"73"},{"size":3791,"mtime":1616745706470,"results":"93","hashOfConfig":"73"},{"size":1558,"mtime":1616745543291,"results":"94","hashOfConfig":"73"},{"size":9598,"mtime":1616762358389,"results":"95","hashOfConfig":"73"},{"size":16108,"mtime":1617001591408,"results":"96","hashOfConfig":"73"},{"size":2155,"mtime":1616770083550,"results":"97","hashOfConfig":"73"},{"size":2029,"mtime":1616770541147,"results":"98","hashOfConfig":"73"},{"size":419,"mtime":1613052032862,"results":"99","hashOfConfig":"73"},{"size":140,"mtime":1613051432655,"results":"100","hashOfConfig":"73"},{"size":730,"mtime":1613051990939,"results":"101","hashOfConfig":"73"},{"size":908,"mtime":1616071365278,"results":"102","hashOfConfig":"73"},{"size":3537,"mtime":1616080701175,"results":"103","hashOfConfig":"73"},{"size":11067,"mtime":1616759952234,"results":"104","hashOfConfig":"73"},{"size":2836,"mtime":1616744432589,"results":"105","hashOfConfig":"73"},{"size":9171,"mtime":1617691946626,"results":"106","hashOfConfig":"73"},{"size":2250,"mtime":1616744431793,"results":"107","hashOfConfig":"73"},{"size":6355,"mtime":1617097480116,"results":"108","hashOfConfig":"73"},{"size":2780,"mtime":1616745068590,"results":"109","hashOfConfig":"73"},{"size":1661,"mtime":1617272760688,"results":"110","hashOfConfig":"73"},{"size":3101,"mtime":1614583804653,"results":"111","hashOfConfig":"73"},{"size":214,"mtime":1616759971315,"results":"112","hashOfConfig":"73"},{"size":1119,"mtime":1614085317035,"results":"113","hashOfConfig":"73"},{"size":1379,"mtime":1616073129400,"results":"114","hashOfConfig":"73"},{"size":69,"mtime":1614156488357,"results":"115","hashOfConfig":"73"},{"size":1433,"mtime":1614607096669,"results":"116","hashOfConfig":"73"},{"size":864,"mtime":1614676311073,"results":"117","hashOfConfig":"73"},{"size":7580,"mtime":1616068315107,"results":"118","hashOfConfig":"73"},{"size":2505,"mtime":1616061717494,"results":"119","hashOfConfig":"73"},{"size":1761,"mtime":1615804881756,"results":"120","hashOfConfig":"73"},{"size":4359,"mtime":1615296134508,"results":"121","hashOfConfig":"73"},{"size":3229,"mtime":1615472604478,"results":"122","hashOfConfig":"73"},{"size":10588,"mtime":1615461167960,"results":"123","hashOfConfig":"73"},{"size":4805,"mtime":1615551015772,"results":"124","hashOfConfig":"73"},{"size":1621,"mtime":1615452447087,"results":"125","hashOfConfig":"73"},{"size":3250,"mtime":1615461224066,"results":"126","hashOfConfig":"73"},{"size":4376,"mtime":1615465096998,"results":"127","hashOfConfig":"73"},{"size":2102,"mtime":1615471322917,"results":"128","hashOfConfig":"73"},{"size":17874,"mtime":1617704050421,"results":"129","hashOfConfig":"73"},{"size":47,"mtime":1615535123127,"results":"130","hashOfConfig":"73"},{"size":11620,"mtime":1617701587067,"results":"131","hashOfConfig":"73"},{"size":4412,"mtime":1616071152468,"results":"132","hashOfConfig":"73"},{"size":3540,"mtime":1616074746904,"results":"133","hashOfConfig":"73"},{"size":3658,"mtime":1616073841466,"results":"134","hashOfConfig":"73"},{"size":3758,"mtime":1616073607458,"results":"135","hashOfConfig":"73"},{"size":3661,"mtime":1616076255506,"results":"136","hashOfConfig":"73"},{"size":4080,"mtime":1617701484623,"results":"137","hashOfConfig":"73"},{"size":1543,"mtime":1616681150507,"results":"138","hashOfConfig":"73"},{"size":968,"mtime":1616681329455,"results":"139","hashOfConfig":"73"},{"size":2345,"mtime":1617000749087,"results":"140","hashOfConfig":"73"},{"size":388,"mtime":1617089744198,"results":"141","hashOfConfig":"73"},{"size":2140,"mtime":1617090959773,"results":"142","hashOfConfig":"73"},{"size":186,"mtime":1617020068436,"results":"143","hashOfConfig":"73"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},"vdwtrg",{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"146"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"196"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"146"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"146"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"146"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"146"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},"E:\\Dev\\React\\sidiro\\src\\index.tsx",[],["295","296"],"E:\\Dev\\React\\sidiro\\src\\reportWebVitals.ts",[],"E:\\Dev\\React\\sidiro\\src\\App.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Drawer.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\routes\\Drawer.routes.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview.component.tsx",["297"],"E:\\Dev\\React\\sidiro\\src\\i18n.ts",[],"E:\\Dev\\React\\sidiro\\src\\translations.ts",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\Root.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\UniversalTabs.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\UniversalTabs.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\UniversalTabs.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\LanguageDialog.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\LanguageDialog.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\LanguageDialog.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Powermonitor.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\LineChart.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\DeviceDataDialog.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\DeviceDataDialog.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\Events.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\UniversalTable.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Reports.component.tsx",["298","299"],"import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { BarChart } from './BarChart.component';\r\nimport { PieChart } from './PieChart.component';\r\nimport { SiemensColors, SiemensAccentBlue, SiemensAccentRed, SiemensAccentYellow } from '../utilities/SiemensColors.utility';\r\nimport { LineChart } from './LineChart.component';\r\nimport { UniversalTabs } from './UniversalTabs.component';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport { UniversalTable } from './UniversalTable.component';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { StackedBarChart } from './StackedBarChart.component';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    select: {\r\n      width: '100%'\r\n    }\r\n  }),\r\n);\r\n\r\nexport const Reports = () => {\r\n  const { t } = useTranslation();\r\n  const [sampleData1, setSampleData1] = React.useState<Array<number>>([2478, 5267, 734, 784, 55])\r\n  const [productionTotal, setProductionTotal] = React.useState<Array<number>>([100, 100, 100, 100, 100, 100])\r\n  const [line37, setLine37] = React.useState<Array<number>>([100, 100, 100, 100, 100])\r\n  const [sampleTimeSeriesData, setSampleTimeSeriesData] = React.useState<Array<{ t: number | Date, y: number }>>([{ t: new Date(2021, 1, 1), y: 10 }, { t: new Date(2021, 1, 5), y: 10 }, { t: new Date(2021, 1, 9), y: 10 }])\r\n  const [dateFrom, changeDateFrom] = React.useState<Date | null>(new Date(new Date().setMonth(new Date().getMonth() - 1)));\r\n  const classes = useStyles()\r\n  const [energyType, setEnergyType] = React.useState('0');\r\n\r\n  const handleEnergyType = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setEnergyType(event.target.value as string);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    let interval = setInterval(() => {\r\n      setSampleData1(sampleData1.map(() => Math.round(Math.random() * 1000) / 10))\r\n      setProductionTotal(productionTotal.map(() => Math.round(Math.random() * 1000) / 20))\r\n      setLine37(line37.map(() => Math.round(Math.random() * 1000) / 40))\r\n\r\n\r\n      setSampleTimeSeriesData(sampleTimeSeriesData.map((data) => {\r\n        return {\r\n          t: data.t,\r\n          y: Math.round(Math.random() * 100) / 100\r\n        }\r\n      }))\r\n    }, 10000)\r\n    return () => clearInterval(interval)\r\n  }, [sampleData1, sampleTimeSeriesData, productionTotal, line37])\r\n\r\n  const energyConsumptionTab = (\r\n    <Grid container spacing={2} >\r\n      <Grid item xs={12} md={8} lg={8} xl={10}>\r\n        <DatePicker\r\n          cancelLabel={t('datePicker.cancelButton')}\r\n          autoOk\r\n          label={'Wybierz miesiąc'}\r\n          value={dateFrom}\r\n          onChange={changeDateFrom}\r\n          fullWidth\r\n          views={['month']}\r\n          format=\"MM/yyyy\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} md={2} lg={2} xl={1}>\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Eksport PDF\r\n      </Button>\r\n      </Grid>\r\n      <Grid item xs={12} md={2} lg={2} xl={1}>\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Eksport CSV\r\n      </Button>\r\n      </Grid>\r\n      <Grid item xs={12} style={{ marginBottom: '0px', marginTop: '30px' }}>\r\n        <Typography gutterBottom variant=\"h5\">Całościowe zużycie energii czynnej</Typography>\r\n      </Grid>\r\n      <Grid item xs={12} md={5}>\r\n        <PieChart\r\n          chartTitle=\"\"\r\n          data={{\r\n            labels: [\"HVPP-4\", \"HVPP-2\", \"HVPP-3\", \"Samochody elektryczne\"],\r\n            datasets: [\r\n              {\r\n                label: \"\",\r\n                backgroundColor: [SiemensColors.tealLight, SiemensColors.redDark, SiemensColors.redLight, SiemensColors.blueDark, SiemensColors.yellowDark],\r\n                data: sampleData1\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n\r\n      </Grid>\r\n      <Grid item xs={12} md={7}>\r\n        <UniversalTable\r\n          columns={['Nazwa grupy', 'Zużycie energii czynnej']}\r\n          rows={[['Produkcja', `${sampleData1[0]} kWh`], ['Magazyny', `${sampleData1[1]} kWh`], ['Biura', `${sampleData1[2]} kWh`], ['Ładowanie samochodów', `${sampleData1[3]} kWh`], ['Zużycie całkowite', `${sampleData1[0] + sampleData1[1] + sampleData1[2] + sampleData1[3]} kWh`]]}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Divider />\r\n      </Grid>\r\n      {/* NEXTLEVEL */}\r\n      <Grid item xs={12} style={{ marginBottom: '0px', marginTop: '30px' }}>\r\n        <Typography gutterBottom variant=\"h5\">Production total</Typography>\r\n      </Grid>\r\n      <Grid item xs={12} md={5}>\r\n        <PieChart\r\n          chartTitle=\"\"\r\n          data={{\r\n            labels: [\"Linia produkcyjna L34\", \"Linia produkcyjna L35\", \"Linia produkcyjna L36\", \"Linia produkcyjna L37\", \"Stacja budynkowa dla linii produkcyjnych\", \"Ogrzewanie, chłodzenie, sprężone powietrze\"],\r\n            datasets: [\r\n              {\r\n                label: \"\",\r\n                backgroundColor: [SiemensAccentBlue.dark3, SiemensAccentBlue.light1, SiemensAccentRed.dark3, SiemensAccentRed.light1, SiemensAccentYellow.dark3, SiemensAccentYellow.light1],\r\n                data: productionTotal\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} md={7}>\r\n        <UniversalTable\r\n          columns={['Nazwa grupy', 'Zużycie energii czynnej']}\r\n          rows={[['Linia produkcyjna L34', `${productionTotal[0]} kWh`], ['Linia produkcyjna L35', `${productionTotal[1]} kWh`], ['Linia produkcyjna L36', `${productionTotal[2]} kWh`], ['Linia produkcyjna L37', `${productionTotal[3]} kWh`],\r\n          ['Stacja budynkowa dla linii produkcyjnych', `${productionTotal[4]} kWh`], ['Ogrzewanie, chłodzenie, sprężone powietrze', `${productionTotal[5]} kWh`], ['Zużycie całkowite', `${productionTotal[0] + productionTotal[1] + productionTotal[2] + productionTotal[3] + productionTotal[4] + productionTotal[5]} kWh`]]}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Divider />\r\n      </Grid>\r\n\r\n      {/* NEXTLEVEL */}\r\n      <Grid item xs={12} style={{ marginBottom: '0px', marginTop: '30px' }}>\r\n        <Typography gutterBottom variant=\"h5\">Line 37</Typography>\r\n      </Grid>\r\n      <Grid item xs={12} md={5}>\r\n        <PieChart\r\n          chartTitle=\"\"\r\n          data={{\r\n            labels: [\"Formowanie\", \"Nawijanie\", \"Mieszanie\", \"Blender RB37\", \"Mikser ZTM37\"],\r\n            datasets: [\r\n              {\r\n                label: \"\",\r\n                backgroundColor: [SiemensAccentBlue.dark3, SiemensAccentBlue.light1, SiemensAccentRed.dark3, SiemensAccentRed.light1, SiemensAccentYellow.dark3],\r\n                data: line37\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} md={7}>\r\n        <UniversalTable\r\n          columns={['Nazwa grupy', 'Zużycie energii czynnej']}\r\n          rows={[['Formowanie', `${line37[0]} kWh`], ['Nawijanie', `${line37[1]} kWh`], ['Mieszanie', `${line37[2]} kWh`], ['Blender RB37', `${line37[3]} kWh`],\r\n          ['Mikser ZTM37', `${line37[4]} kWh`], ['Zużycie całkowite', `${line37[0] + line37[1] + line37[2] + line37[3] + line37[4]} kWh`]]}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Divider />\r\n      </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      {/* <BarChart\r\n          chartTitle=\"barchart\"\r\n          data={{\r\n            labels: [\"Africa\", \"Asia\", \"Europe\", \"Latin America\", \"North Americaa\"],\r\n            datasets: [\r\n              {\r\n                label: \"Population (millions)\",\r\n                backgroundColor: [SiemensColorsAlpha.tealLightAlpha, SiemensColorsAlpha.redDarkAlpha, SiemensColorsAlpha.redLightAlpha, SiemensColorsAlpha.blueDarkAlpha, SiemensColorsAlpha.yellowDarkAlpha],\r\n                borderColor: [SiemensColors.tealLight, SiemensColors.redDark, SiemensColors.redLight, SiemensColors.blueDark, SiemensColors.yellowDark],\r\n                borderWidth: 2,\r\n                data: sampleData1,\r\n                \r\n              }\r\n            ]\r\n          }} \r\n          /> */}\r\n\r\n      <Grid item xs={12}>\r\n        {/* <PieChart\r\n          chartTitle=\"something\"\r\n          data={{\r\n            labels: [\"Africa\", \"Asia\", \"Europe\", \"Latin America\", \"North Americaa\"],\r\n            datasets: [\r\n              {\r\n                label: \"Population (millions)\",\r\n                backgroundColor: [SiemensColors.tealLight, SiemensColors.redDark, SiemensColors.redLight, SiemensColors.blueDark, SiemensColors.yellowDark],\r\n                data: sampleData1\r\n              }\r\n            ]\r\n          }} \r\n          /> */}\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        {/* <LineChart\r\n          data={{\r\n            datasets: [\r\n              {\r\n                label: \"dataset1\",\r\n                backgroundColor: SiemensColors.tealLight,\r\n                borderColor: SiemensColors.tealLight,\r\n                fill: false,\r\n                lineTension: 0,\r\n                data: sampleTimeSeriesData\r\n              },\r\n              {\r\n                label: \"dataset2\",\r\n                backgroundColor: SiemensColors.yellowDark,\r\n                borderColor: SiemensColors.yellowDark,\r\n                fill: false,\r\n                lineTension: 0,\r\n                data: [{ t: new Date(2021, 1, 1), y: 5 }, { t: new Date(2021, 1, 5), y: 7 }, { t: new Date(2021, 1, 9), y: 6 }]\r\n              }\r\n            ]\r\n          }} \r\n          /> */}\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n\r\n  const usageProfileTab = (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={12} md={5} lg={5}>\r\n        <DatePicker\r\n          cancelLabel={t('datePicker.cancelButton')}\r\n          autoOk\r\n          label={'Wybierz miesiąc'}\r\n          value={dateFrom}\r\n          onChange={changeDateFrom}\r\n          fullWidth\r\n          views={['month']}\r\n          format=\"MM/yyyy\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} md={3} lg={3}>\r\n        <FormControl className={classes.select}>\r\n          <InputLabel id=\"breaker-select-label\">Energia</InputLabel>\r\n          <Select\r\n            fullWidth\r\n            labelId=\"breaker-select-label\"\r\n            id=\"breaker-select\"\r\n            value={energyType}\r\n            onChange={handleEnergyType}\r\n          >\r\n            <MenuItem value={0}>Energia czynna</MenuItem>\r\n            <MenuItem value={10}>Energia bierna indukcyjna</MenuItem>\r\n            <MenuItem value={20}>Energia bierna pojemnościowa</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={12} md={2} lg={2}>\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Eksport PDF\r\n      </Button>\r\n      </Grid>\r\n      <Grid item xs={12} md={2} lg={2}>\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Eksport CSV\r\n      </Button>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <StackedBarChart\r\n          chartTitle=\"\"\r\n          data={{\r\n            labels: ['Standing costs', 'Running costs'], // responsible for how many bars are gonna show on the chart\r\n            // create 12 datasets, since we have 12 items\r\n            // data[0] = labels[0] (data for first bar - 'Standing costs') | data[1] = labels[1] (data for second bar - 'Running costs')\r\n            // put 0, if there is no data for the particular bar\r\n            datasets: [{\r\n               label: 'Washing and cleaning',\r\n               data: [0, 8],\r\n               backgroundColor: '#22aa99'\r\n            }, {\r\n               label: 'Traffic tickets',\r\n               data: [0, 2],\r\n               backgroundColor: '#994499'\r\n            }, {\r\n               label: 'Tolls',\r\n               data: [0, 1],\r\n               backgroundColor: '#316395'\r\n            }, {\r\n               label: 'Parking',\r\n               data: [5, 2],\r\n               backgroundColor: '#b82e2e'\r\n            }, {\r\n               label: 'Car tax',\r\n               data: [0, 1],\r\n               backgroundColor: '#66aa00'\r\n            }, {\r\n               label: 'Repairs and improvements',\r\n               data: [0, 2],\r\n               backgroundColor: '#dd4477'\r\n            }, {\r\n               label: 'Maintenance',\r\n               data: [6, 1],\r\n               backgroundColor: '#0099c6'\r\n            }, {\r\n               label: 'Inspection',\r\n               data: [0, 2],\r\n               backgroundColor: '#990099'\r\n            }, {\r\n               label: 'Loan interest',\r\n               data: [0, 3],\r\n               backgroundColor: '#109618'\r\n            }, {\r\n               label: 'Depreciation of the vehicle',\r\n               data: [0, 2],\r\n               backgroundColor: '#109618'\r\n            }, {\r\n               label: 'Fuel',\r\n               data: [0, 1],\r\n               backgroundColor: '#dc3912'\r\n            }, {\r\n               label: 'Insurance and Breakdown cover',\r\n               data: [4, 0],\r\n               backgroundColor: '#3366cc'\r\n            }]\r\n         }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} style={{ marginBottom: '0px', marginTop: '30px' }}>\r\n        <Typography gutterBottom variant=\"h5\">Całościowa energia czynna</Typography>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n\r\n  const outgoingFeedersParameters = (\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={12} md={5} lg={5}>\r\n        <FormControl className={classes.select}>\r\n          <InputLabel id=\"breaker-select-label\">Wybierz rozdzielnicę</InputLabel>\r\n          <Select\r\n            fullWidth\r\n            labelId=\"breaker-select-label\"\r\n            id=\"breaker-select\"\r\n            value={energyType}\r\n            onChange={handleEnergyType}\r\n          >\r\n            <MenuItem value={0}>HVPP-1</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={12} md={3} lg={3}>\r\n        <FormControl className={classes.select}>\r\n          <InputLabel id=\"breaker-select-label\">Wybierz odbiór</InputLabel>\r\n          <Select\r\n            fullWidth\r\n            labelId=\"breaker-select-label\"\r\n            id=\"breaker-select\"\r\n            value={energyType}\r\n            onChange={handleEnergyType}\r\n          >\r\n            <MenuItem value={0}>QT01</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={12} md={2} lg={2}>\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Eksport PDF\r\n      </Button>\r\n      </Grid>\r\n      <Grid item xs={12} md={2} lg={2}>\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Eksport CSV\r\n      </Button>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12}>\r\n          <Typography variant='h2' gutterBottom>{t('reportsPage.title')}</Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <UniversalTabs\r\n        name='Reports'\r\n        tabs={[\r\n          {\r\n            label: 'Miesięczne zużycie energii',\r\n            content: energyConsumptionTab\r\n          },\r\n          {\r\n            label: 'Profil zużycia energii',\r\n            content: usageProfileTab\r\n          },\r\n          {\r\n            label: 'Moce 15-minutowe',\r\n            content: <p>Power demand tab content</p>\r\n          },\r\n          {\r\n            label: 'Parametry zasilania',\r\n            content: <p>Supply parameters tab content</p>\r\n          },\r\n          {\r\n            label: 'Parametry odbiorów',\r\n            content: outgoingFeedersParameters\r\n          }\r\n        ]}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}","E:\\Dev\\React\\sidiro\\src\\components\\BarChart.component.tsx",[],["300","301"],"E:\\Dev\\React\\sidiro\\src\\components\\PieChart.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\Backdrop.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\Backdrop.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\Backdrop.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\BreakerDevice.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\CurrentTab.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTab.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\TransformerSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\CircuitBreakerSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\GeneratorSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\CouplingBreakerSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\ParametersTableSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Overview\\SectionSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\utilities\\SiemensColors.utility.ts",[],"E:\\Dev\\React\\sidiro\\src\\utilities\\DeviceTypes.utility.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\GeneratorDevice.component.tsx",[],["302","303"],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\TransformerDevice.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\utilities\\BreakerStates.utility.ts",[],"E:\\Dev\\React\\sidiro\\src\\hooks\\useUpdateChartFontColor.hook.ts",[],"E:\\Dev\\React\\sidiro\\src\\hooks\\useUpdateChartDatasets.hook.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\TableWithSort.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\PanelSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CompartmentSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\TestSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\mock\\elevation.mock.ts",[],["304","305"],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3WLSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3VAVerticalSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\CircuitBreaker3VAHorizontalSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NP1VerticalSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NJ6SVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\Elevation\\SwitchDisconnector3NJ4SVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\Elevation.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\Elevation.action.ts",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\Overview.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\PowerTab.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\THDITab.component.tsx",["306"],"import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { SiemensAccentTeal, SiemensAccentGreen, SiemensAccentRed, SiemensAccentBlue } from '../../utilities/SiemensColors.utility';\r\nimport { DatePicker, TimePicker } from \"@material-ui/pickers\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    timePickersContainer: {\r\n      marginTop: theme.spacing(2),\r\n      paddingTop: theme.spacing(2),\r\n      paddingBottom: theme.spacing(2),\r\n    }\r\n  }),\r\n);\r\n\r\nexport const THDITab = () => {\r\n  const [dateFrom, changeDateFrom] = React.useState<Date | null>(new Date());\r\n  const classes = useStyles();\r\n  const { t } = useTranslation();\r\n  const [l1, setL1] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n  const [l2, setL2] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n  const [l3, setL3] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n\r\n  const generateSampleData = () => {\r\n    let arr1 = []\r\n    let arr2 = []\r\n    let arr3 = []\r\n    for (let i = 0; i < 25; i++) {\r\n      arr1.push({\r\n        t: new Date(2021, 2, i+1, 1),\r\n        y: 30+ Math.random()*10\r\n      })\r\n      arr2.push({\r\n        t: new Date(2021, 2, i+1, 1),\r\n        y: 30+ Math.random()*10\r\n      })\r\n      arr3.push({\r\n        t: new Date(2021, 2, i+1, 1),\r\n        y: 4\r\n      })\r\n    }\r\n    setL1(arr1)\r\n    setL2(arr2)\r\n    setL3(arr3)\r\n  }\r\n\r\n  React.useEffect(()=>{\r\n    generateSampleData()\r\n  },[])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <LineChart\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  label: \"THD I L1 [%]\",\r\n                  backgroundColor: SiemensAccentTeal.light1,\r\n                  borderColor: SiemensAccentTeal.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l1\r\n                },\r\n                {\r\n                  label: \"THD I L2 [%]\",\r\n                  backgroundColor: SiemensAccentRed.light1,\r\n                  borderColor: SiemensAccentRed.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l2\r\n                },\r\n                {\r\n                  label: \"THD I L3 [%]\",\r\n                  backgroundColor: SiemensAccentGreen.light1,\r\n                  borderColor: SiemensAccentGreen.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l3\r\n                }\r\n              ]\r\n            }} />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={2} className={classes.timePickersContainer}>\r\n        <Grid item xs={12} md={6}>\r\n          <DatePicker\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={changeDateFrom}\r\n            fullWidth\r\n            disableFuture\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TimePicker\r\n            ampm={false}\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={changeDateFrom}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\VoltageLNTab.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\THDUTab.component.tsx",["307"],"import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { LineChart } from '../LineChart.component';\r\nimport { SiemensAccentTeal, SiemensAccentGreen, SiemensAccentRed, SiemensAccentBlue } from '../../utilities/SiemensColors.utility';\r\nimport { DatePicker, TimePicker } from \"@material-ui/pickers\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    timePickersContainer: {\r\n      marginTop: theme.spacing(2),\r\n      paddingTop: theme.spacing(2),\r\n      paddingBottom: theme.spacing(2),\r\n    }\r\n  }),\r\n);\r\n\r\nexport const THDUTab = () => {\r\n  const [dateFrom, changeDateFrom] = React.useState<Date | null>(new Date());\r\n  const classes = useStyles();\r\n  const { t } = useTranslation();\r\n  const [l1, setL1] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n  const [l2, setL2] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n  const [l3, setL3] = React.useState<Array<{t: number | Date, y: number}>>([{t: 0, y: 0}])\r\n\r\n  const generateSampleData = () => {\r\n    console.log(parseInt((new Date('2021.01.01').getTime() / 1000).toFixed(0)))\r\n    let arr1 = []\r\n    let arr2 = []\r\n    let arr3 = []\r\n    for (let i = 0; i <= 120; i++) {\r\n      arr1.push({\r\n        t: parseInt((new Date('2021.01.01').getTime()).toFixed(0)) + i*1000,\r\n        y: 1+ Math.random()*10\r\n      })\r\n      arr2.push({\r\n        t: parseInt((new Date('2021.01.01').getTime()).toFixed(0)) + i*1000, //minutes\r\n        y: 1+ Math.random()*10\r\n      })\r\n      arr3.push({\r\n        t: parseInt((new Date('2021.01.01').getTime()).toFixed(0)) + i*1000, //minutes\r\n        y: 4\r\n      })\r\n    }\r\n    setL1(arr1)\r\n    setL2(arr2)\r\n    setL3(arr3)\r\n  }\r\n\r\n  React.useEffect(()=>{\r\n    generateSampleData()\r\n  },[])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <LineChart\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  label: \"THD U L1 [%]\",\r\n                  backgroundColor: SiemensAccentTeal.light1,\r\n                  borderColor: SiemensAccentTeal.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l1\r\n                },\r\n                {\r\n                  label: \"THD U L2 [%]\",\r\n                  backgroundColor: SiemensAccentRed.light1,\r\n                  borderColor: SiemensAccentRed.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l2\r\n                },\r\n                {\r\n                  label: \"THD U L3 [%]\",\r\n                  backgroundColor: SiemensAccentGreen.light1,\r\n                  borderColor: SiemensAccentGreen.light1,\r\n                  fill: false,\r\n                  lineTension: 0,\r\n                  data: l3\r\n                }\r\n              ]\r\n            }} />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={2} className={classes.timePickersContainer}>\r\n        <Grid item xs={12} md={6}>\r\n          <DatePicker\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={changeDateFrom}\r\n            fullWidth\r\n            disableFuture\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TimePicker\r\n            ampm={false}\r\n            variant='static'\r\n            autoOk\r\n            label={t('eventsPage.dateFromLabel')}\r\n            value={dateFrom}\r\n            onChange={changeDateFrom}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}","E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\VoltageLLTab.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTabCircuitBreakerSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTabTransformerSVG.component.tsx",[],"E:\\Dev\\React\\sidiro\\src\\components\\DeviceDataDialog\\OverviewTabGeneratorSVG.component.tsx",["308"],"import React from 'react';\r\nimport { lineLength, circleRadius, useStyles } from '../Overview.component';\r\nimport { IOverviewTabTransformerSVG } from './OverviewTabTransformerSVG.component';\r\n\r\nexport const OverviewTabGeneratorSVG: React.FC<IOverviewTabTransformerSVG> = ({ x, y, name, voltageApplied }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* circle, 'G' symbol & end line */}\r\n      <circle\r\n        cx={x}\r\n        cy={y + circleRadius}\r\n        r={circleRadius}\r\n        className={voltageApplied ? classes.circleStyleVoltageApplied : classes.circleStyle}\r\n      />\r\n      <text\r\n        x={x}\r\n        y={y + circleRadius}\r\n        className={classes.generatorSymbolTextStyle}\r\n      >\r\n        G\r\n      </text>\r\n\r\n      <text\r\n        x={x + circleRadius}\r\n        y={y}\r\n        className={classes.overviewTabSVGTextsCentralLeftAnchor}\r\n      >\r\n        &nbsp;&nbsp;{name}\r\n      </text>\r\n    </React.Fragment>\r\n  )\r\n}","E:\\Dev\\React\\sidiro\\src\\components\\StackedBarChart.component.tsx",["309"],"import Chart from 'chart.js';\r\nimport React, { useRef, useState, useEffect, useMemo } from 'react';\r\nimport { PieChartProps } from './PieChart.component';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { SiemensAccentYellow } from '../utilities/SiemensColors.utility';\r\nimport { useUpdateChartFontColor } from '../hooks/useUpdateChartFontColor.hook';\r\nimport { useUpdateChartDatasets } from '../hooks/useUpdateChartDatasets.hook';\r\n\r\ninterface BarChartProps {\r\n  data: {\r\n    labels?: Array<string>,\r\n    datasets: Array<{ label: string, backgroundColor: string, borderColor?: Array<string>, borderWidth?: number, data: Array<number> }>\r\n  },\r\n  chartTitle?: string,\r\n  horizontal?: boolean\r\n}\r\n\r\nexport const StackedBarChart: React.FC<BarChartProps> = ({ data, chartTitle, horizontal }) => {\r\n  const chartContainer = useRef() as React.MutableRefObject<HTMLCanvasElement>;\r\n  const [chartInstance, setChartInstance] = useState<Chart | null>(null);\r\n  const theme = useTheme();\r\n  useUpdateChartFontColor(chartInstance, SiemensAccentYellow.light6);\r\n  useUpdateChartDatasets(chartInstance, data)\r\n\r\n  const chartConfig = useMemo(() => {\r\n    return {\r\n      type: horizontal ? 'horizontalBar' : 'bar',\r\n      data,\r\n      options: {\r\n        scales: {\r\n          yAxes: [{\r\n            stacked: true,\r\n            ticks: {\r\n              fontColor: theme.palette.type === 'dark' ? SiemensAccentYellow.light6 : '#666'\r\n            }\r\n          }],\r\n          xAxes: [{\r\n            stacked: true,\r\n            ticks: {\r\n              fontColor: theme.palette.type === 'dark' ? SiemensAccentYellow.light6 : '#666'\r\n            }\r\n          }]\r\n        },\r\n        title: {\r\n          display: chartTitle ? true : false,\r\n          text: chartTitle ? chartTitle : '',\r\n          fontColor: theme.palette.type === 'dark' ? SiemensAccentYellow.light6 : '#666',\r\n          fontFamily: 'Roboto, Helvetica, Arial, sans-serif',\r\n        }\r\n      }\r\n    }\r\n  }, [data, chartTitle, horizontal, theme.palette.type]);\r\n\r\n  useEffect(() => {\r\n    //instantiate chart with first given data\r\n    if (chartInstance === null) {\r\n      setChartInstance(new Chart(chartContainer.current, chartConfig))\r\n    }\r\n  }, [chartInstance, chartConfig])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <canvas ref={chartContainer} />\r\n    </React.Fragment>\r\n  )\r\n}","E:\\Dev\\React\\sidiro\\src\\services\\FetchTimeseriesAPI.service.ts",[],"E:\\Dev\\React\\sidiro\\src\\reducers\\SystemTopologyData.reducer.ts",[],"E:\\Dev\\React\\sidiro\\src\\actions\\SystemTopologyData.action.ts",[],{"ruleId":"310","replacedBy":"311"},{"ruleId":"312","replacedBy":"313"},{"ruleId":"314","severity":1,"message":"315","line":8,"column":10,"nodeType":"316","messageId":"317","endLine":8,"endColumn":28},{"ruleId":"314","severity":1,"message":"318","line":5,"column":10,"nodeType":"316","messageId":"317","endLine":5,"endColumn":18},{"ruleId":"314","severity":1,"message":"319","line":8,"column":10,"nodeType":"316","messageId":"317","endLine":8,"endColumn":19},{"ruleId":"310","replacedBy":"320"},{"ruleId":"312","replacedBy":"321"},{"ruleId":"310","replacedBy":"322"},{"ruleId":"312","replacedBy":"323"},{"ruleId":"310","replacedBy":"324"},{"ruleId":"312","replacedBy":"325"},{"ruleId":"314","severity":1,"message":"326","line":5,"column":67,"nodeType":"316","messageId":"317","endLine":5,"endColumn":84},{"ruleId":"314","severity":1,"message":"326","line":5,"column":67,"nodeType":"316","messageId":"317","endLine":5,"endColumn":84},{"ruleId":"314","severity":1,"message":"327","line":2,"column":10,"nodeType":"316","messageId":"317","endLine":2,"endColumn":20},{"ruleId":"314","severity":1,"message":"328","line":3,"column":10,"nodeType":"316","messageId":"317","endLine":3,"endColumn":23},"no-native-reassign",["329"],"no-negated-in-lhs",["330"],"@typescript-eslint/no-unused-vars","'CouplingBreakerSVG' is defined but never used.","Identifier","unusedVar","'BarChart' is defined but never used.","'LineChart' is defined but never used.",["329"],["330"],["329"],["330"],["329"],["330"],"'SiemensAccentBlue' is defined but never used.","'lineLength' is defined but never used.","'PieChartProps' is defined but never used.","no-global-assign","no-unsafe-negation"]